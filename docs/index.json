[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "import * as types from './types';\n\nimport * as react from './react';\nimport * as refs from './refs';\nimport * as renderers from './renderers';\nimport RenderData from './renderers/renderData';\nimport Renderer from './renderers/renderer';\nimport * as template from './template';\n\nimport './theme';\n\nconst Formatron = {\n  react,\n  refs,\n  renderers: renderers.default,\n  template,\n  types\n};\n\nFormatron.template.parseTemplate = template.default;\n\nFormatron.renderers.valueRenderers = renderers.valueRenderers;\nFormatron.renderers.RenderData = RenderData;\nFormatron.renderers.Renderer = Renderer;\n\nexport default Formatron;\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Formatron",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Formatron",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/index.js",
    "importStyle": "Formatron",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"react\": *, \"refs\": *, \"renderers\": *, \"template\": *, \"types\": *}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/react/components/tetheredSelect.js",
    "content": "import classNames from 'classnames';\nimport Select from 'react-virtualized-select';\nimport TetheredComponent from 'react-tether';\n\nexport default class TetheredSelect extends Select {\n  constructor(props) {\n    super(props);\n\n    this._renderMenu = this._renderTetheredMenu.bind(this);\n    this._setSelectRef = this._setTetheredSelectRef.bind(this);\n  }\n\n  _renderTetheredMenu(...args) {\n    const menu = super._renderMenu.call(this, ...args);\n    if (!menu) {\n      return;\n    }\n\n    const wrapper = this._selectRef && this._selectRef.wrapper;\n    const width = wrapper ?\n      wrapper.offsetWidth :\n      undefined;\n\n    return (\n      <TetheredComponent\n        classes={{\n          element: 'formatron-tether-element-top'\n        }}\n        renderElementTo='body'\n        attachment='top left'\n        targetAttachment='top left'\n        constraints={[{\n          to: 'scrollParent',\n          attachment: 'together'\n        }, {\n          to: 'window',\n          attachment: 'together'\n        }]}\n      >\n        <div />\n        <div\n          className={classNames('formatron-tethered-select-menu', this.props.tetheredClassName)}\n          style={{width}}\n          onMouseDown={this.handleMouseDown}\n        >\n          {menu}\n        </div>\n      </TetheredComponent>\n    );\n  }\n\n  handleMouseDown = (event) => {\n    event.preventDefault();\n  }\n\n  _setTetheredSelectRef(...args) {\n    super._setSelectRef.call(this, ...args);\n    if (this._selectRef) {\n      this._selectRef.renderClear = this._renderClear.bind(this._selectRef);\n    }\n  }\n\n  // This function is copied from the react-select source, but instead of\n  // returning null for all falsy values, it only returns null if the value is\n  // null or undefined (or length of 0 for multi values).\n  _renderClear() {\n\t\tif (!this.props.clearable ||\n        (typeof this.props.value == 'undefined' || this.props.value === null) ||\n        (typeof this.props.value == 'string' && !this.props.value.length) ||\n        (this.props.multi && !this.props.value.length) ||\n        this.props.disabled ||\n        this.props.isLoading) {\n      return;\n    }\n\n\t\tconst clear = this.props.clearRenderer();\n\n\t\treturn (\n\t\t\t<span\n        className='Select-clear-zone'\n        title={this.props.multi ?\n          this.props.clearAllText :\n          this.props.clearValueText\n        }\n\t\t\t\taria-label={this.props.multi ?\n          this.props.clearAllText :\n          this.props.clearValueText\n        }\n\t\t\t\tonMouseDown={this.clearValue}\n\t\t\t\tonTouchStart={this.handleTouchStart}\n\t\t\t\tonTouchMove={this.handleTouchMove}\n\t\t\t\tonTouchEnd={this.handleTouchEndClearValue}\n\t\t\t>\n\t\t\t\t{clear}\n\t\t\t</span>\n\t\t);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/react/components/tetheredSelect.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "TetheredSelect",
    "memberof": "src/react/components/tetheredSelect.js",
    "static": true,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/react/components/tetheredSelect.js",
    "importStyle": "TetheredSelect",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react-virtualized-select~Select"
    ]
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/react/components/tetheredSelect.js~TetheredSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_renderMenu",
    "memberof": "src/react/components/tetheredSelect.js~TetheredSelect",
    "static": false,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect#_renderMenu",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_setSelectRef",
    "memberof": "src/react/components/tetheredSelect.js~TetheredSelect",
    "static": false,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect#_setSelectRef",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "_renderTetheredMenu",
    "memberof": "src/react/components/tetheredSelect.js~TetheredSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect#_renderTetheredMenu",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "handleMouseDown",
    "memberof": "src/react/components/tetheredSelect.js~TetheredSelect",
    "static": false,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect#handleMouseDown",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "_setTetheredSelectRef",
    "memberof": "src/react/components/tetheredSelect.js~TetheredSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect#_setTetheredSelectRef",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "_renderClear",
    "memberof": "src/react/components/tetheredSelect.js~TetheredSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/components/tetheredSelect.js~TetheredSelect#_renderClear",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/react/index.js",
    "content": "export {default as Form} from './components/form';\nexport {default as Label} from './components/label';\nexport {default as Loading} from './components/loading';\nexport {default as Table} from './components/table';\nexport {default as Select} from './components/tetheredSelect';\n\nexport {default as propTypes} from './propTypes';\n\nexport {default as reactRenderers} from './renderers';\nexport {default as ReactRenderer} from './renderers/reactRenderer';\n\nimport * as dataHelpers from './renderers/data';\nimport * as formHelpers from './renderers/formHelpers';\nimport * as tableHelpers from './renderers/tableHelpers';\n\nexport {dataHelpers, formHelpers, tableHelpers};\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/react/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/refs.js",
    "content": "import Immutable, {List} from 'immutable';\n\nimport {valueRenderers} from '~/renderers';\nimport RenderData from '~/renderers/renderData.js';\nimport * as Types from '~/types';\n\nexport function parseRef(field) {\n  if (field instanceof Ref) {\n    return field;\n  }\n\n  if (field === null || typeof field == 'undefined') {\n    return null;\n  }\n\n  if (typeof field == 'string') {\n    // Quick hack. Remove soon.\n    if (field[1] == ':') {\n      const refTypeCode = field[0];\n      const refValue = field.slice(2);\n      switch (refTypeCode) {\n        case 'r':\n          return new ImmutableRef(refValue);\n\n        case 'q':\n          return new ImmutableListFindRef(createTruthyViewType(refValue));\n\n        case 'f':\n          return new ImmutableListFilterRef(createTruthyViewType(refValue));\n\n        case 'm':\n          return new ImmutableListMapRef(createMappyViewType(refValue));\n\n        case 'v':\n          return new ImmutableViewRef(refValue);\n\n        default:\n          throw new Error(`Invalid hacky ref type: \"${field}\"`);\n      }\n    }\n\n    return new ImmutableRef(field);\n  }\n\n  switch (field.get('type')) {\n    case 'value':\n      return new ImmutableRef(field.get('value'));\n\n    case 'view':\n      return new ImmutableViewRef(Types.parseField(\n        Types.VIEW,\n        field.get('view')\n      ));\n\n    case 'list':\n      const refValue = field.get('value');\n      switch (refValue.get('type')) {\n        case 'find': \n          return new ImmutableListFindRef(\n            Types.parseField(\n              Types.VIEW,\n              refValue.get('finder')\n            )\n          );\n\n        case 'filter':\n          return new ImmutableListFilterRef(\n            Types.parseField(\n              Types.VIEW,\n              refValue.get('filter')\n            )\n          );\n\n        case 'map':\n          return new ImmutableListMapRef(\n            Types.parseField(\n              Types.VIEW,\n              refValue.get('mapper')\n            )\n          );\n\n        default:\n          throw new Error(`Unknown list ref type \"${refValue.get('type')}\"`);\n      }\n\n    default:\n      throw new Error(`Unknown ref type \"${field.get('type')}\"`);\n  }\n}\n\nfunction createMappyViewType(refValue) {\n  return new Types.view.data({\n    label: refValue,\n    ref: parseRef(refValue)\n  });\n}\n\nfunction createTruthyViewType(refValue) {\n  const [ref, value] = refValue.split('=');\n\n  return new Types.view.condition({\n    label: `${ref}=${value}`,\n    op: '=',\n    args: [\n      createMappyViewType(ref),\n      new Types.view.value({value})\n    ],\n    trueType: new Types.view.value({value: true}),\n    falseType: new Types.view.value({value: false})\n  });\n}\n\nexport class Ref {\n  getValue() {\n    throw new Error('Abstract function');\n  }\n\n  getDisplay() {\n    throw new Error('go away');\n  }\n\n  toString() {\n    return this.getDisplay();\n  }\n\n  equals() {\n    return false;\n  }\n\n  hashCode() {\n    return 0;\n  }\n}\n\nexport class ImmutableRef extends Ref {\n  constructor(ref) {\n    super();\n    this.ref = ref;\n  }\n\n  isListRef() {\n    return false;\n  }\n\n  isSingleRef() {\n    return true;\n  }\n\n  isMultiRef() {\n    return !this.isSingleRef();\n  }\n\n  getValue(dataType, dataValue, renderOptions) {\n    if (!dataValue) {\n      return null;\n    }\n\n    if (!this.ref) {\n      return dataValue;\n    }\n\n    return dataValue.get(this.ref);\n  }\n\n  setValue(dataType, dataValue, childValue, renderOptions) {\n    if (!dataValue) {\n      throw new Error(`Cannot set value for on a null object: (with ${this.getDisplay})`);\n    }\n\n    if (!this.ref) {\n      return dataValue;\n    }\n\n    return dataValue.set(this.ref, childValue);\n  }\n\n  getDisplay() {\n    return this.ref;\n  }\n\n  equals(other) {\n    return this.ref == other.ref;\n  }\n\n  hashCode() {\n    return Immutable.hash(this.ref);\n  }\n}\n\nexport class ImmutableViewRef extends ImmutableRef {\n  constructor(view) {\n    super();\n    this.view = view;\n  }\n\n  getValue(dataType, dataValue, renderOptions) {\n    if (!dataValue) {\n      return null;\n    }\n\n    if (!this.view) {\n      return dataValue;\n    }\n\n    const renderData = new RenderData(dataType, dataValue, renderOptions);\n    return valueRenderers.getValue(this.view, renderData)\n  }\n\n  setValue() {\n    throw new Error('Not yet implemented');\n  }\n\n  getDisplay() {\n    return this.view.getLabel();\n  }\n\n  equals(other) {\n    return this.view.uniqueId == other.view.uniqueId;\n  }\n\n  hashCode() {\n    return Immutable.hash(this.view.uniqueId);\n  }\n}\n\nexport class ImmutableListRef extends ImmutableRef {\n  constructor(view) {\n    super();\n    this.view = view;\n  }\n\n  isListRef() {\n    return true;\n  }\n\n  isFinder() {\n    return false;\n  }\n\n  isFilterer() {\n    return false;\n  }\n\n  isMapper() {\n    return false;\n  }\n\n  checkValidData(dataType, dataValue) {\n    if (!dataType instanceof Types.data.list) {\n      throw new Error(`Cannot reference a list with a non-list based data type \"${dataType}\"`);\n    }\n\n    if (!dataValue || !Immutable.isImmutable(dataValue)) {\n      throw new Error(`Cannot reference a non-list with a list ref of ${this.view}`);\n    }\n  }\n\n  getDisplay() {\n    return this.view.getLabel();\n  }\n\n  applyView(itemType, item, renderOptions) {\n    const renderData = new RenderData(itemType, item, renderOptions);\n    return valueRenderers.getValue(this.view, renderData);\n  }\n\n  getValue(listType, list, renderOptions) {\n    this.checkValidData(listType, list);\n    \n    if (!this.constructor.method) {\n      return list;\n    }\n\n    const itemType = listType.getItemType();\n    return list[this.constructor.method](\n      (item, index) => this.applyView(itemType, item, renderOptions)\n    );\n  }\n\n  setValue(listType, list, newItem, renderOptions) {\n    if (List.isList(newItem)) {\n      console.warn('Setting each list item to be a list. This may be due to using multiple list refs which is currently unimplemented');\n    }\n\n    return list.map(() => newItem);\n  }\n\n  equals(other) {\n    return this.view.uniqueId == other.view.uniqueId;\n  }\n\n  hashCode() {\n    return Immutable.hash(this.view.uniqueId);\n  }\n}\n\nexport class ImmutableListFindRef extends ImmutableListRef {\n  static method = 'find';\n\n  isFinder() {\n    return true;\n  }\n\n  setValue(listType, list, newItem, renderOptions) {\n    const itemType = listType.getItemType();\n    const index = list\n      .findIndex(item => {\n        const renderData = new RenderData(itemType, item, renderOptions);\n        return valueRenderers.getValue(this.view, renderData);\n      });\n\n    if (index >= 0) {\n      return list.set(index, newItem);\n    } else {\n      return list.push(newItem);\n    }\n  }\n}\n\nexport class ImmutableListFilterRef extends ImmutableListRef {\n  static method = 'filter'\n\n  isSingleRef() {\n    return false;\n  }\n\n  isFilterer() {\n    return true;\n  }\n\n  setValue(listType, list, newItem, renderOptions) {\n    if (List.isList(newItem)) {\n      console.warn('Setting each list item to be a list. This may be due to using multiple list refs which is currently unimplemented');\n    }\n\n    const itemType = listType.getItemType();\n\n    const indexes = list\n      .map((item, index) => [\n        index,\n        item\n      ])\n      .filter(([index, item]) => {\n        const renderData = new RenderData(itemType, item, renderOptions);\n        return valueRenderers.getValue(this.view, renderData);\n      })\n      .map(([index, item]) => index);\n\n    return list\n      .map((item, index) => indexes.includes(index) ?\n        newItem :\n        index\n      );\n  }\n}\n\nexport class ImmutableListMapRef extends ImmutableListRef {\n  static method = 'map'\n\n  isSingleRef() {\n    return false;\n  }\n\n  isMapper() {\n    return true;\n  }\n\n  setValue(listType, list, newItem) {\n    throw new Error('Not yet implemented');\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/refs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "parseRef",
    "memberof": "src/refs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/refs.js~parseRef",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{parseRef}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "createMappyViewType",
    "memberof": "src/refs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/refs.js~createMappyViewType",
    "access": "public",
    "export": false,
    "importPath": "formatron/src/refs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "refValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "createTruthyViewType",
    "memberof": "src/refs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/refs.js~createTruthyViewType",
    "access": "public",
    "export": false,
    "importPath": "formatron/src/refs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "refValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "Ref",
    "memberof": "src/refs.js",
    "static": true,
    "longname": "src/refs.js~Ref",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{Ref}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/refs.js~Ref",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~Ref#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/refs.js~Ref",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~Ref#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "toString",
    "memberof": "src/refs.js~Ref",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~Ref#toString",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "equals",
    "memberof": "src/refs.js~Ref",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~Ref#equals",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "hashCode",
    "memberof": "src/refs.js~Ref",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~Ref#hashCode",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "ImmutableRef",
    "memberof": "src/refs.js",
    "static": true,
    "longname": "src/refs.js~ImmutableRef",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{ImmutableRef}",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "interface": false,
    "extends": [
      "Ref"
    ]
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "ref",
    "memberof": "src/refs.js~ImmutableRef",
    "static": false,
    "longname": "src/refs.js~ImmutableRef#ref",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "isListRef",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#isListRef",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "isSingleRef",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#isSingleRef",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "isMultiRef",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#isMultiRef",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "childValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "equals",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#equals",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "hashCode",
    "memberof": "src/refs.js~ImmutableRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableRef#hashCode",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "ImmutableViewRef",
    "memberof": "src/refs.js",
    "static": true,
    "longname": "src/refs.js~ImmutableViewRef",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{ImmutableViewRef}",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "interface": false,
    "extends": [
      "ImmutableRef"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/refs.js~ImmutableViewRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableViewRef#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "view",
    "memberof": "src/refs.js~ImmutableViewRef",
    "static": false,
    "longname": "src/refs.js~ImmutableViewRef#view",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/refs.js~ImmutableViewRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableViewRef#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/refs.js~ImmutableViewRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableViewRef#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/refs.js~ImmutableViewRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableViewRef#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "equals",
    "memberof": "src/refs.js~ImmutableViewRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableViewRef#equals",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "hashCode",
    "memberof": "src/refs.js~ImmutableViewRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableViewRef#hashCode",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "ImmutableListRef",
    "memberof": "src/refs.js",
    "static": true,
    "longname": "src/refs.js~ImmutableListRef",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{ImmutableListRef}",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "interface": false,
    "extends": [
      "ImmutableRef"
    ]
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "view",
    "memberof": "src/refs.js~ImmutableListRef",
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#view",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "isListRef",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#isListRef",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "isFinder",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#isFinder",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "isFilterer",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#isFilterer",
    "access": "public",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "isMapper",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#isMapper",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "checkValidData",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#checkValidData",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "applyView",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#applyView",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [
      {
        "name": "itemType",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [
      {
        "name": "listType",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "params": [
      {
        "name": "listType",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "newItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "equals",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#equals",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "hashCode",
    "memberof": "src/refs.js~ImmutableListRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListRef#hashCode",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "ImmutableListFindRef",
    "memberof": "src/refs.js",
    "static": true,
    "longname": "src/refs.js~ImmutableListFindRef",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{ImmutableListFindRef}",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "interface": false,
    "extends": [
      "ImmutableListRef"
    ]
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "method",
    "memberof": "src/refs.js~ImmutableListFindRef",
    "static": true,
    "longname": "src/refs.js~ImmutableListFindRef.method",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "isFinder",
    "memberof": "src/refs.js~ImmutableListFindRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListFindRef#isFinder",
    "access": "public",
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/refs.js~ImmutableListFindRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListFindRef#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "params": [
      {
        "name": "listType",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "newItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "ImmutableListFilterRef",
    "memberof": "src/refs.js",
    "static": true,
    "longname": "src/refs.js~ImmutableListFilterRef",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{ImmutableListFilterRef}",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "interface": false,
    "extends": [
      "ImmutableListRef"
    ]
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "method",
    "memberof": "src/refs.js~ImmutableListFilterRef",
    "static": true,
    "longname": "src/refs.js~ImmutableListFilterRef.method",
    "access": "public",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "isSingleRef",
    "memberof": "src/refs.js~ImmutableListFilterRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListFilterRef#isSingleRef",
    "access": "public",
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "isFilterer",
    "memberof": "src/refs.js~ImmutableListFilterRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListFilterRef#isFilterer",
    "access": "public",
    "description": null,
    "lineNumber": 327,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/refs.js~ImmutableListFilterRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListFilterRef#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "params": [
      {
        "name": "listType",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "newItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "ImmutableListMapRef",
    "memberof": "src/refs.js",
    "static": true,
    "longname": "src/refs.js~ImmutableListMapRef",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/refs.js",
    "importStyle": "{ImmutableListMapRef}",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "interface": false,
    "extends": [
      "ImmutableListRef"
    ]
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "method",
    "memberof": "src/refs.js~ImmutableListMapRef",
    "static": true,
    "longname": "src/refs.js~ImmutableListMapRef.method",
    "access": "public",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "isSingleRef",
    "memberof": "src/refs.js~ImmutableListMapRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListMapRef#isSingleRef",
    "access": "public",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "isMapper",
    "memberof": "src/refs.js~ImmutableListMapRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListMapRef#isMapper",
    "access": "public",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/refs.js~ImmutableListMapRef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/refs.js~ImmutableListMapRef#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "params": [
      {
        "name": "listType",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "newItem",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/renderers/index.js",
    "content": "import {Map} from 'immutable';\n\nimport ViewType from '~/types/view';\n\n/**\n * Collection of render functions of a specific type (eg. React renderers).\n */\nexport default class Renderers {\n  /**\n   * Creates a new set of renderers for a set of types.\n   * @param {object.<string, Renderer>} renderers - The set of renderers for each ViewType registered.\n   */\n  constructor(renderers) {\n    this.renderers = renderers || {};\n    this.cachedValues = Map();\n  }\n\n  /**\n   * Registers a new renderer for a specific type.\n   * @param {string} typeName - The name of the renderer to register.\n   * @param {Renderer} renderer - The renderer to register.\n   */\n  register(typeName, renderer) {\n    this.renderers[typeName] = renderer;\n  }\n\n  bustCache(type, viewType, dataValue) {\n    const path = [type, viewType, dataValue];\n    this.cachedValues.deleteIn(path);\n  }\n\n  cache(type, viewType, dataValue, create) {\n    if (typeof viewType == 'string') {\n      const path = [type, viewType, dataValue];\n      this.cachedValues = this.cachedValues\n        .updateIn(path, cachedView => cachedView ?\n          cachedView :\n          create()\n        );\n      return this.cachedValues.getIn(path);\n    } else {\n      return create();\n    }\n  }\n\n  /**\n   * See {@link Renderer#renderFormField}\n   */\n  renderFormField(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return this.renderers[viewType.constructor.typeName].renderFormField(viewType, renderData, this);\n  }\n\n  /**\n   * See {@link Renderer#renderStaticField}\n   */\n  renderStaticField(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return this.renderers[viewType.constructor.typeName].renderStaticField(viewType, renderData, this);\n  }\n\n  /**\n   * See {@link Renderer#renderFormFilter}\n   */\n  renderFormFilter(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return this.renderers[viewType.constructor.typeName].renderFormFilter(viewType, renderData, this);\n  }\n\n  /**\n   * See {@link Renderer#renderFilter}\n   */\n  renderFilter(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return this.renderers[viewType.constructor.typeName].renderFilter(viewType, renderData, this);\n  }\n\n  /**\n   * See {@link Renderer#renderTableCell}\n   */\n  renderTableCell(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return this.renderers[viewType.constructor.typeName].renderTableCell(viewType, renderData, this);\n  }\n\n  /**\n   * See {@link Renderer#renderStaticTableCell}\n   */\n  renderStaticTableCell(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return this.renderers[viewType.constructor.typeName].renderStaticTableCell(viewType, renderData, this);\n  }\n\n  /**\n   * Initializes the view type to display with a specific set of data. This is\n   * normally to call the required API calls before the data is display.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   */\n  initialize(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return viewType.initialize(renderData);\n  }\n\n  /**\n   * Returns the raw data value that is represented by this view type.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   */\n  getValue(viewType, renderData) {\n    return this.cache('value', viewType, renderData.dataValue, () => {\n      viewType = this.parseViewType(viewType, renderData);\n      return viewType.getValue(renderData, this);\n    });\n  }\n\n  /**\n   * Returns a \"pretty\" data value that is represented by this view type.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   */\n  getDisplay(viewType, renderData) {\n    return this.cache('display', viewType, renderData.dataValue, () => {\n      viewType = this.parseViewType(viewType, renderData);\n      return viewType.getDisplay(renderData, this);\n    });\n  }\n\n  /**\n   * Returns a map of properties to use to display a table.\n   * @params {ViewType} viewType - The view type to get the props of.\n   */\n  getTableProps(viewType, renderData) {\n    viewType = this.parseViewType(viewType, renderData);\n    return viewType.getTableProps();\n  }\n\n  /**\n   * If the view type passed in is a string and if the `viewTypes` property\n   * exists in the renderData options, attempt to look up the viewType by name.\n   */\n  parseViewType(viewType, renderData) {\n    const viewTypes = this.getViewTypes(renderData);\n    if (typeof viewType == 'string') {\n      const lookup = viewTypes.get(viewType);\n      if (lookup) {\n        return this.parseViewType(lookup, renderData);\n      }\n    } else if (viewType instanceof ViewType) {\n      return viewType;\n    }\n\n    throw new Error(`Invalid ViewType passed: ${viewType} (${viewTypes})`);\n  }\n\n  getViewTypes(renderData) {\n    const viewTypes = typeof renderData.options.viewTypes == 'function' ?\n      renderData.options.viewTypes(renderData) :\n      renderData.options.viewTypes;\n\n    return viewTypes || Map();\n  }\n}\n\n/**\n * The renderers to use to render view types to js values.\n */\nexport const valueRenderers = new Renderers();\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/renderers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "Renderers",
    "memberof": "src/renderers/index.js",
    "static": true,
    "longname": "src/renderers/index.js~Renderers",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/renderers/index.js",
    "importStyle": "Renderers",
    "description": "Collection of render functions of a specific type (eg. React renderers).",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#constructor",
    "access": "public",
    "description": "Creates a new set of renderers for a set of types.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object.<string, Renderer>"
        ],
        "spread": false,
        "optional": false,
        "name": "renderers",
        "description": "The set of renderers for each ViewType registered."
      }
    ]
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "renderers",
    "memberof": "src/renderers/index.js~Renderers",
    "static": false,
    "longname": "src/renderers/index.js~Renderers#renderers",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "cachedValues",
    "memberof": "src/renderers/index.js~Renderers",
    "static": false,
    "longname": "src/renderers/index.js~Renderers#cachedValues",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "register",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#register",
    "access": "public",
    "description": "Registers a new renderer for a specific type.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "The name of the renderer to register."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "The renderer to register."
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "bustCache",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#bustCache",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "cache",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#cache",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "create",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "renderFormField",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#renderFormField",
    "access": "public",
    "description": "See {@link Renderer#renderFormField}",
    "lineNumber": 49,
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "renderStaticField",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#renderStaticField",
    "access": "public",
    "description": "See {@link Renderer#renderStaticField}",
    "lineNumber": 57,
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "renderFormFilter",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#renderFormFilter",
    "access": "public",
    "description": "See {@link Renderer#renderFormFilter}",
    "lineNumber": 65,
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "renderFilter",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#renderFilter",
    "access": "public",
    "description": "See {@link Renderer#renderFilter}",
    "lineNumber": 73,
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "renderTableCell",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#renderTableCell",
    "access": "public",
    "description": "See {@link Renderer#renderTableCell}",
    "lineNumber": 81,
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "renderStaticTableCell",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#renderStaticTableCell",
    "access": "public",
    "description": "See {@link Renderer#renderStaticTableCell}",
    "lineNumber": 89,
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#initialize",
    "access": "public",
    "description": "Initializes the view type to display with a specific set of data. This is\nnormally to call the required API calls before the data is display.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#getValue",
    "access": "public",
    "description": "Returns the raw data value that is represented by this view type.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#getDisplay",
    "access": "public",
    "description": "Returns a \"pretty\" data value that is represented by this view type.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "getTableProps",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#getTableProps",
    "access": "public",
    "description": "Returns a map of properties to use to display a table.",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to get the props of."
      }
    ],
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "parseViewType",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#parseViewType",
    "access": "public",
    "description": "If the view type passed in is a string and if the `viewTypes` property\nexists in the renderData options, attempt to look up the viewType by name.",
    "lineNumber": 142,
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "getViewTypes",
    "memberof": "src/renderers/index.js~Renderers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/index.js~Renderers#getViewTypes",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "valueRenderers",
    "memberof": "src/renderers/index.js",
    "static": true,
    "longname": "src/renderers/index.js~valueRenderers",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/renderers/index.js",
    "importStyle": "{valueRenderers}",
    "description": "The renderers to use to render view types to js values.",
    "lineNumber": 168,
    "type": {
      "types": [
        "src/renderers/index.js~Renderers"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/renderers/renderData.js",
    "content": "/**\n * Struct that contains all information required for rendering.\n */\nexport default class RenderData {\n  /**\n   * Creates a new render data struct.\n   *\n   * @param {DataType} dataType - A description of the data value.\n   * @param {object} dataValue - The data value to render.\n   * @param {object} options - Arbitrary parameters to pass to the renderer.\n   */\n  constructor(dataType, dataValue, options = {}) {\n    /** @type {DataType} */\n    this.dataType = dataType;\n\n    /** @type {object} */\n    this.dataValue = dataValue;\n\n    /** @type {object} */\n    this.options = options;\n  }\n\n  /**\n   * Creates a new render data struct with the passed in options added.\n   *\n   * @param {object} newOptions - Arbitrary parameters to pass to the renderer.\n   * @return {RenderData} - A new render data object.\n   */\n  addOptions(newOptions) {\n    return new RenderData(this.dataType, this.dataValue, {\n      ...this.options,\n      ...newOptions\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/renderers/renderData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "class",
    "name": "RenderData",
    "memberof": "src/renderers/renderData.js",
    "static": true,
    "longname": "src/renderers/renderData.js~RenderData",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/renderers/renderData.js",
    "importStyle": "RenderData",
    "description": "Struct that contains all information required for rendering.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 141,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/renderers/renderData.js~RenderData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderData.js~RenderData#constructor",
    "access": "public",
    "description": "Creates a new render data struct.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "A description of the data value."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataValue",
        "description": "The data value to render."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Arbitrary parameters to pass to the renderer."
      }
    ]
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "dataType",
    "memberof": "src/renderers/renderData.js~RenderData",
    "static": false,
    "longname": "src/renderers/renderData.js~RenderData#dataType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "DataType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "dataValue",
    "memberof": "src/renderers/renderData.js~RenderData",
    "static": false,
    "longname": "src/renderers/renderData.js~RenderData#dataValue",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "options",
    "memberof": "src/renderers/renderData.js~RenderData",
    "static": false,
    "longname": "src/renderers/renderData.js~RenderData#options",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "addOptions",
    "memberof": "src/renderers/renderData.js~RenderData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderData.js~RenderData#addOptions",
    "access": "public",
    "description": "Creates a new render data struct with the passed in options added.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newOptions",
        "description": "Arbitrary parameters to pass to the renderer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RenderData"
      ],
      "spread": false,
      "description": "A new render data object."
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/renderers/renderer.js",
    "content": "/**\n * The renderer interface.\n */\nexport default class Renderer {\n  constructor() {\n    if (this.constructor == Renderer) {\n      throw new Error('Cannot instantiate Renderer');\n    }\n  }\n\n  /**\n   * Renders an interactable form field for the viewType.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   * @return {object} The rendered form field.\n   */\n  renderFormField(viewType, renderData) {}\n\n  /**\n   * Renders a non-interactable field for the viewType.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   * @return {object} The rendered static field.\n   */\n  renderStaticField(viewType, renderData) {}\n\n  /**\n   * Renders an interactable field to be used for filtering this view type with\n   * an accompanying form label.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   * @return {object} The renderer form filter element.\n   */\n  renderFormFilter(viewType, renderData) {}\n\n  /**\n   * Renders an interactable field to be used for filtering this view type.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   * @return {object} The rendered table filter element.\n   */\n  renderFilter(viewType, renderData) {}\n\n  /**\n   * Renders an interactable field to be used in a table for this view type.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   * @return {object} The rendered table cell.\n   */\n  renderTableCell(viewType, renderData) {}\n\n  /**\n   * Renders a non-interactable field to be used in a table for this view type.\n   * @params {ViewType} viewType - The view type to render.\n   * @params {RenderData} renderData - The data to render.\n   * @return {object} The rendered table cell.\n   */\n  renderStaticTableCell(viewType, renderData) {}\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/renderers/renderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "class",
    "name": "Renderer",
    "memberof": "src/renderers/renderer.js",
    "static": true,
    "longname": "src/renderers/renderer.js~Renderer",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/renderers/renderer.js",
    "importStyle": "Renderer",
    "description": "The renderer interface.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 148,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/renderers/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderer.js~Renderer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "renderFormField",
    "memberof": "src/renderers/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderer.js~Renderer#renderFormField",
    "access": "public",
    "description": "Renders an interactable form field for the viewType.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The rendered form field."
    },
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "renderStaticField",
    "memberof": "src/renderers/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderer.js~Renderer#renderStaticField",
    "access": "public",
    "description": "Renders a non-interactable field for the viewType.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The rendered static field."
    },
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "renderFormFilter",
    "memberof": "src/renderers/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderer.js~Renderer#renderFormFilter",
    "access": "public",
    "description": "Renders an interactable field to be used for filtering this view type with\nan accompanying form label.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The renderer form filter element."
    },
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "renderFilter",
    "memberof": "src/renderers/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderer.js~Renderer#renderFilter",
    "access": "public",
    "description": "Renders an interactable field to be used for filtering this view type.",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The rendered table filter element."
    },
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "renderTableCell",
    "memberof": "src/renderers/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderer.js~Renderer#renderTableCell",
    "access": "public",
    "description": "Renders an interactable field to be used in a table for this view type.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The rendered table cell."
    },
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "renderStaticTableCell",
    "memberof": "src/renderers/renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/renderers/renderer.js~Renderer#renderStaticTableCell",
    "access": "public",
    "description": "Renders a non-interactable field to be used in a table for this view type.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{ViewType} viewType - The view type to render."
      },
      {
        "tagName": "@params",
        "tagValue": "{RenderData} renderData - The data to render."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The rendered table cell."
    },
    "params": [
      {
        "name": "viewType",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/template.js",
    "content": "import {fromJS} from 'immutable';\n\nimport {parseRef} from './refs';\n\n// TODO: Do we need to properly parse the templates instead of doing a dumb\n// regex check that will match anywhere in a string?\n// This really just needs to be reworked, or even, removed from this library.\nconst templateSingleRegex = /{{[^}]*}}/g;\nconst templateArrayRegex = /{\\[[^}\\]]*\\]}/g;\n\nexport default function parseTemplate(template, renderData, options = {}) {\n  const format = options.format || (text => text);\n\n  const {dataType, dataValue} = renderData;\n\n  return template\n    .replace(templateSingleRegex, match => {\n      const ref = parseRef(match.slice(2, match.length - 2));\n      const {field, value} = dataType.getFieldAndValue(dataValue, ref, renderData.options);\n      return format(field.getDisplay(value, renderData.options));\n    })\n    .replace(templateArrayRegex, match => {\n      const refs = fromJS(JSON.parse(match.slice(1, match.length - 1)))\n        .map(parseRef);\n      const {field, value} = dataType.getFieldAndValue(dataValue, refs, renderData.options);\n      return format(field.getDisplay(value, renderData.options));\n    });\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/template.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "templateSingleRegex",
    "memberof": "src/template.js",
    "static": true,
    "longname": "src/template.js~templateSingleRegex",
    "access": "public",
    "export": false,
    "importPath": "formatron/src/template.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "templateArrayRegex",
    "memberof": "src/template.js",
    "static": true,
    "longname": "src/template.js~templateArrayRegex",
    "access": "public",
    "export": false,
    "importPath": "formatron/src/template.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "parseTemplate",
    "memberof": "src/template.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/template.js~parseTemplate",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/template.js",
    "importStyle": "parseTemplate",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "template",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/theme/index.js",
    "content": "import 'react-select/dist/react-select.css';\nimport 'react-virtualized/styles.css';\nimport 'react-virtualized-select/styles.css';\n\nimport './index.sass';\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/theme/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/types/data/bool.js",
    "content": "import DataType from './';\n\n/**\n * The DataType for boolean values.\n * @extends {DataType}\n */\nexport default class BoolType extends DataType {\n  static typeName = 'bool';\n\n  /**\n   * Default value is `false`\n   * @return {bool} The default bool value.\n   */\n  getDefaultValue() {\n    return super.getDefaultValue(false);\n  }\n\n  /**\n   * @deprecated New ViewTypes will take over this functionality.\n   */\n  getDisplay(value) {\n    return this.getValue(value) ?\n      'Yes' :\n      'No';\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/bool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "class",
    "name": "BoolType",
    "memberof": "src/types/data/bool.js",
    "static": true,
    "longname": "src/types/data/bool.js~BoolType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/bool.js",
    "importStyle": "BoolType",
    "description": "The DataType for boolean values.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "DataType"
    ]
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/bool.js~BoolType",
    "static": true,
    "longname": "src/types/data/bool.js~BoolType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/bool.js~BoolType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/bool.js~BoolType#getDefaultValue",
    "access": "public",
    "description": "Default value is `false`",
    "lineNumber": 14,
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "The default bool value."
    },
    "params": []
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/bool.js~BoolType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/bool.js~BoolType#getDisplay",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "deprecated": "New ViewTypes will take over this functionality.",
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/types/data/date.js",
    "content": "import moment from 'moment';\n\nimport DataType from './';\n\n\n/**\n * The DataType for date values. Stores a value of seconds since January 1st 1970.\n *\n * @param {Object} options\n * @param {string} [options.dateType='datetime'] - 'date' | 'time' | 'datetime'\n */\nexport default class DateType extends DataType {\n  static typeName = 'date';\n\n  /**\n   * @returns <string>\n   */\n  getType() {\n    return this.options.get('dateType', 'datetime');\n  }\n\n  /**\n   * @deprecated Will be moved to ViewType\n   */\n  getFormat() {\n    return this.options.get('format', this.getDefaultFormat());\n  }\n\n  /**\n   * @deprecated Will be moved to ViewType\n   */\n  getDefaultFormat() {\n    switch (this.getType()) {\n      case 'time':\n        return 'hh:mm a';\n      case 'date':\n        return 'YYYY-MM-DD';\n      case 'datetime':\n      default:\n        return 'YYYY-MM-DD hh:mm a';\n    }\n  }\n\n  /**\n   * Converts between strings, JS Date objects, moment objects, or unix time values.\n   *\n   * @param {string|Date|moment|number} value - The date value to convert\n   * @param {string} toType = 'string' | 'datetime' | 'unix'. The type to convert to.\n   * @return {string|moment|number} The date value in a new format.\n   */\n  convert(value, toType) {\n    const fromType =\n      typeof value == 'string'\n        ? 'string'\n        : value instanceof Date || value instanceof moment\n          ? 'datetime'\n          : 'unix';\n\n    return this.conversions[fromType][toType](value);\n  }\n\n  /**\n   * Checks if the passed in value holds a valid date value.\n   * @param {any} value - The date value\n   * @return {bool}\n   */\n  hasValue(value) {\n    if (!super.hasValue(value)) {\n      return false;\n    }\n    if (value instanceof moment && !value.isValid()) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * See {@link DataType#getValue}.\n   */\n  getValue(value) {\n    return super.getValue(this.convert(value, 'unix'));\n  }\n\n  /**\n   * @deprecated Will be moved to view types.\n   */\n  getDisplay(value) {\n    value = this.getValue(value);\n    return this.convert(value, 'string');\n  }\n\n  unixToDatetime = value => {\n    if (value === null) {\n      return moment(null);\n    }\n\n    if (this.getType() == 'time') {\n      return moment.utc(value * 1000);\n    } else {\n      return moment(value * 1000);\n    }\n  };\n\n  unixToString = value => {\n    const datetime = this.unixToDatetime(value);\n    return this.datetimeToString(datetime);\n  };\n\n  datetimeToUnix = value => {\n    if (!value || !value.isValid()) {\n      return null;\n    }\n\n    if (this.getType() == 'time') {\n      return value.hours() * 3600 + value.minutes() * 60 + value.seconds();\n    } else {\n      return value.valueOf() / 1000;\n    }\n  };\n\n  datetimeToString = value => {\n    if (value && value.isValid()) {\n      return value.format(this.getFormat());\n    }\n    return '';\n  };\n\n  stringToUnix = value => {\n    if (this.getType() == 'time') {\n      const today = moment.utc(value, this.getFormat());\n      return this.datetimeToUnix(today);\n    } else {\n      const datetime = this.stringToDatetime(value);\n      return this.datetimeToUnix(datetime);\n    }\n  };\n\n  stringToDatetime = value => {\n    if (this.getType() == 'time') {\n      const today = moment.utc(value, this.getFormat());\n      const unixTime = this.datetimeToUnix(today);\n      return this.unixToDatetime(unixTime);\n    } else {\n      return moment(new Date(value).valueOf());\n    }\n  };\n\n  stringToString = value => {\n    return this.datetimeToString(this.stringToDatetime(value));\n  };\n\n  conversions = {\n    unix: {\n      unix: value => value,\n      datetime: this.unixToDatetime,\n      string: this.unixToString,\n    },\n    datetime: {\n      unix: this.datetimeToUnix,\n      datetime: value => value,\n      string: this.datetimeToString,\n    },\n    string: {\n      unix: this.stringToUnix,\n      datetime: this.stringToDatetime,\n      string: this.stringToString,\n    },\n  };\n\n  /**\n   * @deprecated Filtering will be refactored to its own module.\n   */\n  filter(filterValue, rowValue) {\n    const lowerInput = this.convert(filterValue.get('lower'), 'unix');\n    const upperInput = this.convert(filterValue.get('upper'), 'unix');\n\n    const lower = Number.isFinite(lowerInput) ? lowerInput : -Infinity;\n    const upper = Number.isFinite(upperInput) ? upperInput : Infinity;\n    return rowValue >= lower && rowValue <= upper;\n  }\n}\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/date.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "DateType",
    "memberof": "src/types/data/date.js",
    "static": true,
    "longname": "src/types/data/date.js~DateType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/date.js",
    "importStyle": "DateType",
    "description": "The DataType for date values. Stores a value of seconds since January 1st 1970.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'datetime'",
        "defaultRaw": "'datetime'",
        "name": "options.dateType",
        "description": "'date' | 'time' | 'datetime'"
      }
    ],
    "interface": false,
    "extends": [
      "src/types/data/.js~DataType"
    ]
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/date.js~DateType",
    "static": true,
    "longname": "src/types/data/date.js~DateType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "getType",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#getType",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "<string>"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "<string>"
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "getFormat",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#getFormat",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "deprecated": "Will be moved to ViewType",
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getDefaultFormat",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#getDefaultFormat",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "deprecated": "Will be moved to ViewType",
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "convert",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#convert",
    "access": "public",
    "description": "Converts between strings, JS Date objects, moment objects, or unix time values.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Date",
          "moment",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The date value to convert"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "toType",
        "description": "= 'string' | 'datetime' | 'unix'. The type to convert to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "moment",
        "number"
      ],
      "spread": false,
      "description": "The date value in a new format."
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#hasValue",
    "access": "public",
    "description": "Checks if the passed in value holds a valid date value.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The date value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#getValue",
    "access": "public",
    "description": "See {@link DataType#getValue}.",
    "lineNumber": 80,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#getDisplay",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "deprecated": "Will be moved to view types.",
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "unixToDatetime",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#unixToDatetime",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "unixToString",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#unixToString",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "datetimeToUnix",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#datetimeToUnix",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "datetimeToString",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#datetimeToString",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "stringToUnix",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#stringToUnix",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "stringToDatetime",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#stringToDatetime",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "stringToString",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#stringToString",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "conversions",
    "memberof": "src/types/data/date.js~DateType",
    "static": false,
    "longname": "src/types/data/date.js~DateType#conversions",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "filter",
    "memberof": "src/types/data/date.js~DateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/date.js~DateType#filter",
    "access": "public",
    "description": "",
    "lineNumber": 173,
    "deprecated": "Filtering will be refactored to its own module.",
    "params": [
      {
        "name": "filterValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/types/data/dict.js",
    "content": "import {Map} from 'immutable';\n\nimport ImmutableListType from './list';\n\n/**\n * The DataType for dictionary values using Immutable.js.\n *\n * @param {Object} options\n * @param {DataType} options.keyType - The DataType to use for keys\n * @param {DataType} options.valueType - The DataType to use for values\n */\nexport default class ImmutableDictType extends ImmutableListType {\n  static typeName = 'dict';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('keyType', parsefield)\n      .update('valueType', parseField);\n  }\n\n  isOfType(value) {\n    return Map.isMap(value);\n  }\n\n  getDefaultValue() {\n    return super.getDefaultValue(Map());\n  }\n\n  getKeyType() {\n    return this.options.get('keyType');\n  }\n\n  getValueType() {\n    return this.options.get('valueType');\n  }\n\n  getItemType() {\n    return this.getValueType();\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/dict.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "ImmutableDictType",
    "memberof": "src/types/data/dict.js",
    "static": true,
    "longname": "src/types/data/dict.js~ImmutableDictType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/dict.js",
    "importStyle": "ImmutableDictType",
    "description": "The DataType for dictionary values using Immutable.js.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "options.keyType",
        "description": "The DataType to use for keys"
      },
      {
        "nullable": null,
        "types": [
          "DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "options.valueType",
        "description": "The DataType to use for values"
      }
    ],
    "interface": false,
    "extends": [
      "src/types/data/list.js~ImmutableListType"
    ]
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/dict.js~ImmutableDictType",
    "static": true,
    "longname": "src/types/data/dict.js~ImmutableDictType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/data/dict.js~ImmutableDictType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/data/dict.js~ImmutableDictType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "isOfType",
    "memberof": "src/types/data/dict.js~ImmutableDictType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/dict.js~ImmutableDictType#isOfType",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/dict.js~ImmutableDictType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/dict.js~ImmutableDictType#getDefaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getKeyType",
    "memberof": "src/types/data/dict.js~ImmutableDictType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/dict.js~ImmutableDictType#getKeyType",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getValueType",
    "memberof": "src/types/data/dict.js~ImmutableDictType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/dict.js~ImmutableDictType#getValueType",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "getItemType",
    "memberof": "src/types/data/dict.js~ImmutableDictType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/dict.js~ImmutableDictType#getItemType",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/types/data/enum.js",
    "content": "import {List, Map} from 'immutable';\n\nimport DataType, {validationErrors} from './';\nimport ValidationError from './validationError';\n\n/**\n * DataType for enumerated values.\n * @todo Split this MultiEnumType and EnumType.\n *\n * @param {Object} options\n * @param {bool} [options.multi=false] - Specifies whether this enum value holds one or multiple values.\n * @param {string[]|{value: string, label: string}[]} options.values - The list of enum values. If a\n *  list of strings is passed in, each string is interpreted as both the label and value.\n */\nexport default class EnumType extends DataType {\n  static typeName = 'enum';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field)\n      .update('values', values => values\n        .map(value => typeof value == 'string' ?\n          Map({value, label: value}) :\n          value\n        )\n      );\n  }\n\n  isMulti() {\n    return this.options.get('multi', false);\n  }\n\n  getValues() {\n    return this.options.get('values', List());\n  }\n\n  hasValue(value, checkDefault) {\n    if (this.isMulti()) {\n      return value && value.size > 0;\n    } else {\n      return super.hasValue(value, checkDefault);\n    }\n  }\n\n  getDefaultValue() {\n    if (this.isMulti()) {\n      return super.getDefaultValue(List());\n    } else {\n      return super.getDefaultValue();\n    }\n  }\n\n  getDisplay(value) {\n    if (this.isMulti()) {\n      value = value || List();\n      return this.getValues()\n        .filter(option => value.includes(option.get('value')))\n        .map(option => option.get('label'))\n        .join(', ');\n    } else {\n      const option = this.getValues()\n        .find(option => option.get('value') == value);\n      return option ?\n        option.get('label') :\n        '';\n    }\n  }\n\n  validate(value) {\n    return super.validate(value, () => {\n      if (this.isMulti()) {\n        const selection = this.getValues()\n          .filter(option => value.includes(option.get('value')));\n\n        if (value.size != selection.size) {\n          return new ValidationError(validationErrors.invalidOption, this, value);\n        }\n      } else {\n        const option = this.getValues()\n          .find(option => option.get('value') == value);\n\n        if (!option) {\n          return new ValidationError(validationErrors.invalidOption, this, value);\n        }\n      }\n    });\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/enum.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "EnumType",
    "memberof": "src/types/data/enum.js",
    "static": true,
    "longname": "src/types/data/enum.js~EnumType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/enum.js",
    "importStyle": "EnumType",
    "description": "DataType for enumerated values.",
    "lineNumber": 15,
    "todo": [
      "Split this MultiEnumType and EnumType."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.multi",
        "description": "Specifies whether this enum value holds one or multiple values."
      },
      {
        "nullable": null,
        "types": [
          "string[]",
          "{value: string, label: string}[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.values",
        "description": "The list of enum values. If a\n list of strings is passed in, each string is interpreted as both the label and value."
      }
    ],
    "interface": false,
    "extends": [
      "src/types/data/.js~DataType"
    ]
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/enum.js~EnumType",
    "static": true,
    "longname": "src/types/data/enum.js~EnumType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/data/enum.js~EnumType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/data/enum.js~EnumType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "isMulti",
    "memberof": "src/types/data/enum.js~EnumType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/enum.js~EnumType#isMulti",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "getValues",
    "memberof": "src/types/data/enum.js~EnumType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/enum.js~EnumType#getValues",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/enum.js~EnumType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/enum.js~EnumType#hasValue",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/enum.js~EnumType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/enum.js~EnumType#getDefaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/enum.js~EnumType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/enum.js~EnumType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "validate",
    "memberof": "src/types/data/enum.js~EnumType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/enum.js~EnumType#validate",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/types/data/index.js",
    "content": "/**\n * @namespace DataTypes\n * @module\n */\n\nimport Immutable, {List, Map} from 'immutable';\n\nimport Type from '../type';\nimport ValidationError from './validationError';\n\n/**\n * A set of standard validation errors that registered types can use.\n *\n * TODO: Add a better way to modify the basic error messages other than just\n * editing the imported object, which is baaaaad.\n */\nexport const validationErrors = {\n  required: 'This field is required',\n  undefinedValue: 'This field is in a bad state. Please change the value and try again',\n  invalidOption: 'The value selected does not exist',\n  integer: 'This field must be an integer',\n  finite: 'This field must be a finite number',\n  email: 'This field must be an email address',\n  url: 'This field must be a URL',\n  ssn: 'This field must be a valid SSN',\n  tel: 'This field must be a valid US telephone number',\n  zipCode: 'This field must be a valid US Zip Code',\n  singleline: 'This field must contain just one line of text'\n};\n\n/**\n * The base data type. Every registered data type must eventually inherit from this.\n */\nexport default class DataType extends Type {\n  /** The data type name. This must be overridden. */\n  static typeName = '';\n\n  static parse(field, parseField) {\n    field = Immutable.fromJS(field);\n    return new this(\n      field.get('name'),\n      this.parseOptions(field.get('options'), parseField)\n    );\n  }\n\n  /**\n   * Creates a new instance of a data type.\n   * @param {string} name - The unique name of this instance.\n   * @param {Object} options - Options to apply to this instance.\n   * @param {bool} [options.required=false] - Is this data type required to have a value?\n   * @param {bool} [optons.unique=false] - Is this data type required to be unique across all models?\n   * @param {bool} [options.generated=false] - Does the server generate this value if it is left blank?\n   * @param {bool} [options.excluded=false] - Does this value get excluded from the output?\n   * @param {any} [options.defaultValue=null] - The default value to use.\n   * @param {function(value: any, rootValue: any): boolean} [options.validator] - A custom validation function\n   * @param {string[]} validationLinks - A list of other data types in this model to also validate when this one is validated\n   */\n  constructor(name, options) {\n    super();\n    this.name = name;\n    this.options = Immutable.fromJS(options || {});\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getOptions() {\n    return this.options();\n  }\n\n  isRequired() {\n    return this.options.get('required', false);\n  }\n\n  isUnique() {\n    return this.options.get('unique', false);\n  }\n\n  isGenerated() {\n    return this.options.get('generated', false);\n  }\n\n  isExcluded() {\n    return this.options.get('excluded', false);\n  }\n\n  getDefaultValue(defaultValue = null) {\n    const optionsDefaultValue = this.options.get('defaultValue');\n    return typeof optionsDefaultValue == 'undefined' ?\n      defaultValue :\n      optionsDefaultValue;\n  }\n\n  getValidator() {\n    return this.options.get('validator', () => undefined);\n  }\n\n  getValidationLinks() {\n    return this.options.get('validationLinks', List());\n  }\n\n  /**\n   * Checks if the passed in value is \"not empty\".\n   * @param {object} value - The data value to check.\n   * @param {bool} [checkDefault=true] - Check if the value is the default value or not.\n   * @return {bool} `true` if it is \"not empty\", otherwise, `false`.\n   */\n  hasValue(value, checkDefault = true) {\n    // TODO: should the types that inherit from DataType check that the value\n    // is valid? (eg, a number contains a number type, text contains a string,\n    // etc)\n    if (typeof value == 'undefined' || value === null || (value === this.getDefaultValue() && checkDefault)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Returns a parsed value. A value of `undefined` implies that the value is\n   * missing and should be filled in by a default value, first supplied in the\n   * options, and if not, the one supplied by the type.\n   * @params {object} value - The data value to parse.\n   */\n  getValue(value, defaultValue) {\n    // TODO: see comment in `hasValue` for typechecking.\n    const values = this.isGenerated() ?\n      [value] :\n      [\n        value,\n        this.getDefaultValue(defaultValue)\n      ];\n\n    return values\n      .find(value => typeof value != 'undefined');\n  }\n\n  getField(ref) {\n    return this;\n  }\n\n  getFieldAndValue(value, ref) {\n    return {\n      field: this,\n      value: this.getValue(value)\n    };\n  }\n\n  /**\n   * Returns the value parsed for human consumption.\n   * @params {object} value - The data value to parse.\n   * @return {string} The parsed value.\n   */\n  getDisplay(value) {\n    value = this.getValue(value);\n    return (value && value.toString) ? value.toString() : '';\n  }\n\n  /**\n   * Validates that the given value follows the rules of the data type.\n   * @params {object} value - The value to validate.\n   * @return An error if one was found, undefined otherwise.\n   */\n  validate(value, callback) {\n    value = this.getValue(value);\n\n    if (value === this.getDefaultValue() && this.hasValue(value, false)) {\n      return;\n    }\n\n    if (!this.hasValue(value, false)) {\n      if (this.isGenerated()) {\n        return;\n      } else if (this.isRequired()) {\n        return new ValidationError(validationErrors.required, this, value);\n      } else {\n        return;\n      }\n    }\n\n    if (callback) {\n      return callback();\n    }\n  }\n\n  exclude(model, deep=true) {\n    return this.isExcluded()\n      ? undefined\n      : model;\n  }\n\n  filter(filterValue, rowValue) {\n    return filterValue == rowValue;\n  }\n}\n\nexport class ImmutableDataType extends DataType {\n  static typeName = '';\n\n  hasValue(value, checkDefault) {\n    if (!super.hasValue(value, checkDefault)) {\n      return false;\n    }\n    return value && value.size > 0;\n  }\n\n  getValue(value, ref, renderOptions) {\n    value = super.getValue(value);\n    if (ref) {\n      return this.getFieldAndValue(value, ref, renderOptions).value;\n    }\n    return value;\n  }\n\n  getField(ref, renderOptions) {\n    throw new Error(`\"getField\" is not implemented for \"${this.getName()}\"`);\n  }\n\n  getNextField(field, refs, renderOptions) {\n    if (refs.size == 0) {\n      return field;\n    } else {\n      if (field && field.getField) {\n        return field.getField(refs, renderOptions);\n      }\n      throw new Error(`Cannot call \"getField\" \"${field.name}\" of data type \"${field.constructor.name}\"`);\n    }\n  }\n\n  getFieldAndValue(value, ref, renderOptions) {\n    throw new Error(`\"getFieldAndValue\" is not implemented for ${this.getName()}\"`);\n  }\n\n  getNextFieldAndValue(field, value, refs, renderOptions) {\n    if (refs.size == 0) {\n      return {field, value};\n    } else {\n      if (field && field.getFieldAndValue) {\n        return field.getFieldAndValue(value, refs, renderOptions);\n      }\n      throw new Error(`Cannot call \"getFieldAndValue\" for \"${field.name}\" of data type \"${field.constructor.name}\"`);\n    }\n  }\n\n  setValue(value, ref, newValue) {\n    throw new Error(`\"setField\" is not implemented for \"${this.getName()}\"`);\n  }\n\n  setNextValue(field, oldValue, newValue, refs, renderOptions) {\n    if (refs.size == 0) {\n      return newValue;\n    } else {\n      if (field.setValue) {\n        return field.setValue(oldValue, refs, newValue, renderOptions);\n      }\n      throw new Error(`Cannot call \"setValue\" for \"${field.name}\" of data type \"${field.constructor.name}\"`);\n    }\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "validationErrors",
    "memberof": "src/types/data/index.js",
    "static": true,
    "longname": "src/types/data/index.js~validationErrors",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/index.js",
    "importStyle": "{validationErrors}",
    "description": "A set of standard validation errors that registered types can use.\n\nTODO: Add a better way to modify the basic error messages other than just\nediting the imported object, which is baaaaad.",
    "lineNumber": 17,
    "type": {
      "types": [
        "{\"required\": string, \"undefinedValue\": string, \"invalidOption\": string, \"integer\": string, \"finite\": string, \"email\": string, \"url\": string, \"ssn\": string, \"tel\": string, \"zipCode\": string, \"singleline\": string}"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "class",
    "name": "DataType",
    "memberof": "src/types/data/index.js",
    "static": true,
    "longname": "src/types/data/index.js~DataType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/index.js",
    "importStyle": "DataType",
    "description": "The base data type. Every registered data type must eventually inherit from this.",
    "lineNumber": 34,
    "interface": false,
    "extends": [
      "src/types/type.js~Type"
    ]
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/index.js~DataType",
    "static": true,
    "longname": "src/types/data/index.js~DataType.typeName",
    "access": "public",
    "description": "The data type name. This must be overridden.",
    "lineNumber": 36,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "parse",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/data/index.js~DataType.parse",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#constructor",
    "access": "public",
    "description": "Creates a new instance of a data type.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The unique name of this instance."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to apply to this instance."
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.required",
        "description": "Is this data type required to have a value?"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "optons.unique",
        "description": "Is this data type required to be unique across all models?"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.generated",
        "description": "Does the server generate this value if it is left blank?"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.excluded",
        "description": "Does this value get excluded from the output?"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.defaultValue",
        "description": "The default value to use."
      },
      {
        "nullable": null,
        "types": [
          "function(value: any, rootValue: any): boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.validator",
        "description": "A custom validation function"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "validationLinks",
        "description": "A list of other data types in this model to also validate when this one is validated"
      }
    ]
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "name",
    "memberof": "src/types/data/index.js~DataType",
    "static": false,
    "longname": "src/types/data/index.js~DataType#name",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "options",
    "memberof": "src/types/data/index.js~DataType",
    "static": false,
    "longname": "src/types/data/index.js~DataType#options",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "getName",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getName",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getOptions",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "isRequired",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#isRequired",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "isUnique",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#isUnique",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "isGenerated",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#isGenerated",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "isExcluded",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#isExcluded",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getDefaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "defaultValue",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "getValidator",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getValidator",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "getValidationLinks",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getValidationLinks",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#hasValue",
    "access": "public",
    "description": "Checks if the passed in value is \"not empty\".",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The data value to check."
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "checkDefault",
        "description": "Check if the value is the default value or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "`true` if it is \"not empty\", otherwise, `false`."
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getValue",
    "access": "public",
    "description": "Returns a parsed value. A value of `undefined` implies that the value is\nmissing and should be filled in by a default value, first supplied in the\noptions, and if not, the one supplied by the type.",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{object} value - The data value to parse."
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "getField",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getField",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "getFieldAndValue",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getFieldAndValue",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"field\": *, \"value\": *}"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#getDisplay",
    "access": "public",
    "description": "Returns the value parsed for human consumption.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{object} value - The data value to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The parsed value."
    },
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "validate",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#validate",
    "access": "public",
    "description": "Validates that the given value follows the rules of the data type.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{object} value - The value to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An error if one was found, undefined otherwise."
    },
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "exclude",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#exclude",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "deep",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "filter",
    "memberof": "src/types/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~DataType#filter",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [
      {
        "name": "filterValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "ImmutableDataType",
    "memberof": "src/types/data/index.js",
    "static": true,
    "longname": "src/types/data/index.js~ImmutableDataType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/index.js",
    "importStyle": "{ImmutableDataType}",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "interface": false,
    "extends": [
      "DataType"
    ]
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "static": true,
    "longname": "src/types/data/index.js~ImmutableDataType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#hasValue",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "getField",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#getField",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "getNextField",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#getNextField",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "getFieldAndValue",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#getFieldAndValue",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "getNextFieldAndValue",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#getNextFieldAndValue",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "setNextValue",
    "memberof": "src/types/data/index.js~ImmutableDataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/index.js~ImmutableDataType#setNextValue",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "src/types/data/list.js",
    "content": "import {List} from 'immutable';\n\nimport RenderData from '~/renderers/renderData';\nimport DataViewType from '~/types/view/data';\n\nimport DataType, {ImmutableDataType} from './';\nimport ValidationError from './validationError';\n\nexport default class ImmutableListType extends ImmutableDataType {\n  static typeName = 'list';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field)\n      .update('itemType', parseField);\n  }\n\n  initialize(value, renderOptions) {\n    const field = this.getItemType();\n    if (field.initialize) {\n      this.getValue(value)\n        .forEach(item => field.initialize(item, renderOptions));\n    }\n  }\n\n  isOfType(value) {\n    return List.isList(value);\n  }\n\n  getItemType() {\n    return this.options.get('itemType');\n  }\n\n  hasValue(value, checkDefault) {\n    if (!super.hasValue(value, checkDefault)) {\n      return false;\n    }\n    return value && value.size > 0;\n  }\n\n  getDefaultValue() {\n    return super.getDefaultValue(List());\n  }\n\n  getDisplay(value, renderOptions) {\n    if (this.hasValue(value)) {\n      const itemType = this.getItemType();\n      return value\n        .map(item => itemType.getDisplay(item, renderOptions))\n        .join(', ');\n    }\n    return '';\n  }\n\n  getFieldFromRef(ref, renderOptions) {\n    if (ref.isListRef() && ref.isFinder()) {\n      if (!ref.cachedChildType) {\n        const itemType = this.getItemType();\n        ref.cachedChildType = new itemType.constructor(`found${itemType.constructor.name}(${itemType.getName()})`, itemType.options\n          .update('filters', (filters = List()) => filters.push(ref))\n        );\n      }\n      return ref.cachedChildType;\n    } else if (ref.isSingleRef()) {\n      return this.getItemType();\n    } else if (ref.isMapper()) {\n      if (!ref.cachedChildType) {\n        const itemType = this.getItemType();\n        const newItemType = ref.view instanceof DataViewType ?\n          ref.view.getField(new RenderData(itemType, null, renderOptions)) :\n          new DataType(`mapped${this.constructor.name}Item`, Map());\n\n        ref.cachedChildType = new this.constructor(`mapped${this.constructor.name}(${this.getName()})`, this.options\n          .set('itemType', newItemType)\n        );\n      }\n      return ref.cachedChildType;\n    } else if (ref.isFilterer()) {\n      if (!ref.cachedChildType) {\n        ref.cachedChildType = new this.constructor(`filtered${this.constructor.name}(${this.getName()})`, this.options);\n      }\n      return ref.cachedChildType;\n    } else {\n      return this;\n    }\n  }\n\n  getField(refs, renderOptions) {\n    if (!List.isList(refs)) {\n      refs = List([refs]);\n    }\n\n    if (refs.size == 0) {\n      return null;\n    }\n\n    const field = this.getFieldFromRef(refs.first(), renderOptions);\n    return this.getNextField(field, refs.rest(), renderOptions);\n  }\n\n  getFieldAndValue(list, ref, renderOptions) {\n    if (!List.isList(ref)) {\n      ref = List([ref]);\n    }\n\n    if (ref.size == 0) {\n      return {};\n    }\n\n    if (!list || !this.isOfType(list)) {\n      return {field: this.getField(ref, renderOptions)};\n    }\n\n    const firstRef = ref.first();\n    const value = firstRef.getValue(this, list, renderOptions);\n    const field = this.getFieldFromRef(firstRef, renderOptions);\n\n    return this.getNextFieldAndValue(field, value, ref.rest(), renderOptions);\n  }\n\n  setValue(list, ref, newValue, renderOptions) {\n    list = this.getValue(list);\n\n    if (!this.isOfType(list)) {\n      throw new Error(`Cannot set value of a non-${this.constructor.name} (${list})`);\n    }\n\n    if (!List.isList(ref)) {\n      ref = List([ref]);\n    }\n\n    if (ref.size == 0) {\n      throw new Error(`Invalid ref to set value in ${this.constructor.name} \"${ref}\"`);\n    }\n\n    const firstRef = ref.first();\n\n    const field = this.getFieldFromRef(firstRef, renderOptions);\n    const oldValue = firstRef.getValue(this, list, renderOptions);\n\n    return firstRef.setValue(this, list, this.setNextValue(\n      field, oldValue, newValue, ref.rest(), renderOptions\n    ), renderOptions);\n  }\n\n  validate(list) {\n    return super.validate(list, () => {\n      const itemType = this.getItemType();\n      return list\n        .map((item, index) => [\n          index,\n          itemType.validate(item)\n        ])\n        .filter(([index, error]) => error && (!List.isList(error) || error.size > 0))\n        .map(([index, error]) => {\n          error.addRef(index);\n          error.field = this;\n          return error;\n        });\n    });\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "ImmutableListType",
    "memberof": "src/types/data/list.js",
    "static": true,
    "longname": "src/types/data/list.js~ImmutableListType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/list.js",
    "importStyle": "ImmutableListType",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/types/data/.js~ImmutableDataType"
    ]
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "static": true,
    "longname": "src/types/data/list.js~ImmutableListType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/data/list.js~ImmutableListType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "isOfType",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#isOfType",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getItemType",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#getItemType",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#hasValue",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#getDefaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "getFieldFromRef",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#getFieldFromRef",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "getField",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#getField",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "getFieldAndValue",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#getFieldAndValue",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "validate",
    "memberof": "src/types/data/list.js~ImmutableListType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/list.js~ImmutableListType#validate",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "src/types/data/listOrMap.js",
    "content": "import * as Types from '../';\nimport {ImmutableDataType} from './';\n\nimport ImmutableListType from './list';\nimport ImmutableMapType from './map';\n\nexport default class ImmutableListOrMapType extends ImmutableDataType {\n  static typeName = '';\n\n  constructor(name, options, dataTypes) {\n    super(name, options);\n\n    this.itemType = new Types.data.map(this.getName(), this.options\n      .set('data', dataTypes)\n    );\n\n    this.listType = new Types.data.list(this.getName(), this.options\n      .set('itemType', this.itemType)\n    );\n\n    this.type = this.isMulti() ?\n      this.listType :\n      this.itemType;\n  }\n\n  initialize(value, renderOptions) {\n    if (this.type.initialize) {\n      this.type.initialize(this.getValue(value), renderOptions);\n    }\n  }\n\n  isMulti() {\n    return this.options.get('multi');\n  }\n\n  getDefaultValue() {\n    return this.type.getDefaultValue();\n  }\n\n  hasValue(model, checkDefault) {\n    return this.type.hasValue(model, checkDefault);\n  }\n\n  getValue(model, ref, renderOptions) {\n    return this.type.getValue(model, ref, renderOptions);\n  }\n\n  getMapDisplay(model, renderOptions) {\n    return this.itemType.getDisplay(model, renderOptions);\n  }\n\n  getDisplay(model, renderOptions) {\n    if (this.isMulti()) {\n      return model\n        .map(value => this.getMapDisplay(value, renderOptions))\n        .join(', ');\n    } else {\n      return this.getMapDisplay(value, renderOptions);\n    }\n  }\n\n  getField(refs, renderOptions) {\n    return this.type.getField(refs, renderOptions);\n  }\n\n  getFieldAndValue(model, refs, renderOptions) {\n    return this.type.getFieldAndValue(model, refs, renderOptions);\n  }\n\n  setValue(model, refs, newValue, renderOptions) {\n    return this.type.setValue(model, refs, newValue, renderOptions);\n  }\n\n  validate(model) {\n    return this.type.validate(model);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/listOrMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "ImmutableListOrMapType",
    "memberof": "src/types/data/listOrMap.js",
    "static": true,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/listOrMap.js",
    "importStyle": "ImmutableListOrMapType",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/types/data/.js~ImmutableDataType"
    ]
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "static": true,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "itemType",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#itemType",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "listType",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#listType",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "type",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#type",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "isMulti",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#isMulti",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#getDefaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#hasValue",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "getMapDisplay",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#getMapDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "getField",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#getField",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "getFieldAndValue",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#getFieldAndValue",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "validate",
    "memberof": "src/types/data/listOrMap.js~ImmutableListOrMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/listOrMap.js~ImmutableListOrMapType#validate",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/types/data/map.js",
    "content": "import {List, Map} from 'immutable';\n\nimport {parseRef} from '~/refs';\n\nimport DataType, {ImmutableDataType} from './';\nimport ValidationError from './validationError';\n\nexport default class ImmutableMapType extends ImmutableDataType {\n  static typeName = 'map';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('data', data => data\n        .map(fieldData => fieldData.get('type') ?\n          Map({\n            path: List([fieldData.get('name')]),\n            field: parseField(fieldData)\n          }) :\n          fieldData\n            .update('field', parseField)\n        )\n      );\n  }\n\n  initialize(value, renderOptions) {\n    value = this.getValue(value);\n    this.getData()\n      .forEach(fieldData => {\n        const field = fieldData.get('field');\n        const path = fieldData.get('path');\n        if (field.initialize) {\n          field.initialize(value.getIn(path), renderOptions);\n        }\n      });\n  }\n\n  getDefaultValue() {\n    return super.getDefaultValue(Map());\n  }\n\n  getData() {\n    return this.options.get('data')\n      .map(fieldData => fieldData instanceof DataType ?\n        Map({\n          path: List([fieldData.getName()]),\n          field: fieldData\n        }) :\n        fieldData\n      );\n  }\n\n  getDataNames() {\n    return this.getData()\n      .map(fieldData => fieldData.get('field').getName());\n  }\n\n  hasValue(model, checkDefault) {\n    if (!super.hasValue(model, checkDefault)) {\n      return false;\n    }\n    return this.getData()\n      .map(fieldData => fieldData.get('field')\n        .hasValue(model.getIn(fieldData.get('path'), checkDefault))\n      )\n      .reduce((modelHasValue, fieldHasValue) => modelHasValue || fieldHasValue);\n  }\n\n  getDisplay(model, renderOptions) {\n    model = this.getValue(model);\n    return this.getData()\n      .map(fieldData => ({\n        key: fieldData.get('field').getName(),\n        value: model.getIn(fieldData.get('path'))\n      }))\n      .map(({key, value}) => `${key}: ${value}`)\n      .join(', ');\n  }\n\n  getFieldData(ref) {\n    return this.getData()\n      .find(fieldData => fieldData.get('field').getName() == ref.ref);\n  }\n\n  getValue(model, ref, renderOptions) {\n    model = model || this.getDefaultValue();\n    if (ref) {\n      return this.getFieldAndValue(model, ref, renderOptions).value;\n    } else {\n      return model\n        .update(model => this.getData()\n          .reduce(\n            (model, fieldData) => {\n              const field = fieldData.get('field');\n              const path = fieldData.get('path');\n              const value = field.getValue(model.getIn(path));\n              return model.setIn(path, value);\n            },\n            model\n          )\n        );\n    }\n  }\n\n  getField(refs, renderOptions) {\n    if (!List.isList(refs)) {\n      refs = List([refs]);\n    }\n\n    if (refs.size == 0) {\n      return this;\n    }\n\n    const firstRef = refs.first();\n    if (firstRef.ref === '') {\n      return this.getNextField(this, refs.rest(), renderOptions);\n    }\n\n    const fieldData = this.getFieldData(firstRef);\n    if (!fieldData) {\n      throw new Error(`Cannot find field for ref \"${firstRef}\" on \"${this.getName()}\": \"${this.getDataNames()}\"`);\n    }\n\n    const field = fieldData.get('field');\n\n    return this.getNextField(field, refs.rest(), renderOptions);\n  }\n\n  getFieldAndValue(model, refs, renderOptions) {\n    if (!List.isList(refs)) {\n      refs = List([refs]);\n    }\n\n    if (refs.size == 0) {\n      return {};\n    }\n\n    if (!model) {\n      return {field: this.getField(refs, renderOptions)};\n    }\n\n    const firstRef = refs.first();\n    if (firstRef.ref === '') {\n      return this.getNextFieldAndValue(this, model, refs.rest(), renderOptions);\n    }\n\n    const fieldData = this.getFieldData(firstRef);\n    if (!fieldData) {\n      throw new Error(`Cannot find field for ref \"${firstRef}\" on \"${this.getName()}\": \"${this.getDataNames()}\"`);\n    }\n    \n    const path = fieldData.get('path');\n    const field = fieldData.get('field');\n    const value = field.getValue(model.getIn(path));\n\n    return this.getNextFieldAndValue(field, value, refs.rest(), renderOptions);\n  }\n\n  setValue(model, refs, newValue, renderOptions) {\n    if (!model) {\n      throw new Error('Invalid arguments to setDataValue: model = null');\n    }\n\n    if (!List.isList(refs)) {\n      refs = List([refs]);\n    }\n\n    if (refs.size == 0) {\n      throw new Error(`Invalid arguments to setDataValue: refs = ${refs}`);\n    }\n\n    const firstRef = refs.first();\n    if (firstRef.ref === '') {\n      return this.setNextValue(this, model, newValue, refs.rest(), renderOptions);\n    }\n\n    const fieldData = this.getFieldData(firstRef)\n    if (!fieldData) {\n      throw new Error(`Cannot find field for ref \"${firstRef}\" on \"${this.getName()}\": \"${this.getDataNames()}\"`);\n    }\n\n    const path = fieldData.get('path');\n    const field = fieldData.get('field');\n    const oldValue = model.getIn(path);\n\n    return model\n      .setIn(path, this\n        .setNextValue(field, oldValue, newValue, refs.rest(), renderOptions)\n      );\n  }\n\n  validate(model) {\n    return this.getData()\n      .map(fieldData => {\n        const field = fieldData.get('field');\n        const ref = parseRef(field.getName());\n        return this.validateSingle(model, ref);\n      })\n      .flatten(false)\n      .filter(error => error)\n      .map(error => {\n        error.addRef(parseRef(error.field.getName()));\n        error.field = this;\n        return error;\n      });\n  }\n\n  // TODO: Probably move this out of here and into some form validation / utils module.\n  validateSingle(model, ref) {\n    const {field, value} = this.getFieldAndValue(model, ref, {});\n\n    return List([\n      field.getValidationLinks()\n        .map(linkRef => this.validateSingle(model, parseRef(linkRef)))\n        .flatten(true)\n        .filter(error => error),\n\n      List([\n        field.validate(value),\n        field.getValidator()(value, model, field)\n      ])\n        .filter(error => error)\n    ]).flatten(true);\n  }\n\n  exclude(model, deep=true) {\n    model = super.exclude(model);\n    return !model\n      ? model\n      : this.getData()\n        .reduce((model, fieldData) => {\n          const field = fieldData.get('field');\n          const path = fieldData.get('path');\n          return field.isExcluded()\n            ? model.deleteIn(path)\n            : model.updateIn(path, value => field.exclude(value))\n        }, model);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "ImmutableMapType",
    "memberof": "src/types/data/map.js",
    "static": true,
    "longname": "src/types/data/map.js~ImmutableMapType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/map.js",
    "importStyle": "ImmutableMapType",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/types/data/.js~ImmutableDataType"
    ]
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "static": true,
    "longname": "src/types/data/map.js~ImmutableMapType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/data/map.js~ImmutableMapType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getDefaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "getData",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getData",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "getDataNames",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getDataNames",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#hasValue",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "getFieldData",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getFieldData",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getField",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getField",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "getFieldAndValue",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#getFieldAndValue",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "validate",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#validate",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "validateSingle",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#validateSingle",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "exclude",
    "memberof": "src/types/data/map.js~ImmutableMapType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/map.js~ImmutableMapType#exclude",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "deep",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "file",
    "name": "src/types/data/number.js",
    "content": "import DataType, {validationErrors} from './';\nimport ValidationError from './validationError';\n\nexport default class NumberType extends DataType {\n  static typeName = 'number';\n\n  getType() {\n    return this.options.get('type', 'raw');\n  }\n\n  getMin() {\n    return this.options.get('min', -Infinity);\n  }\n\n  getMax() {\n    return this.options.get('max', Infinity);\n  }\n\n  getDisplay(value) {\n    if (typeof value != 'number') {\n      return '';\n    }\n\n    switch (this.getType()) {\n      case 'float':\n        return value.toLocaleString('en-us', {\n          maximumSignificantDigits: 5\n        });\n\n      case 'integer':\n        return value.toLocaleString('en-us', {\n          maximumFractionDigits: 0\n        });\n\n      case 'raw':\n      default:\n        return `${value}`;\n    }\n  }\n\n  validate(value) {\n    return super.validate(value, () => {\n      if (!Number.isFinite(value)) {\n        return new ValidationError(validationErrors.finite, this, value);\n      }\n\n      if (this.getType() == 'integer' && !Number.isInteger(value)) {\n        return new ValidationError(validationErrors.integer, this, value);\n      }\n\n      const min = this.getMin();\n      const max = this.getMax();\n      if (value < min || value > max) {\n        return new ValidationError(`This value must be between ${min} and ${max} inclusive`, this, value);\n      }\n    });\n  }\n\n  filter(filterValue, rowValue) {\n    const lowerInput = filterValue.get('lower');\n    const upperInput = filterValue.get('upper');\n\n    const lower = Number.isFinite(lowerInput) ?\n      lowerInput :\n      -Infinity;\n\n    const upper = Number.isFinite(upperInput) ?\n      upperInput :\n      Infinity;\n\n    return rowValue >= lower && rowValue <= upper;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/number.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "class",
    "name": "NumberType",
    "memberof": "src/types/data/number.js",
    "static": true,
    "longname": "src/types/data/number.js~NumberType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/number.js",
    "importStyle": "NumberType",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/types/data/.js~DataType"
    ]
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/number.js~NumberType",
    "static": true,
    "longname": "src/types/data/number.js~NumberType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "getType",
    "memberof": "src/types/data/number.js~NumberType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/number.js~NumberType#getType",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "getMin",
    "memberof": "src/types/data/number.js~NumberType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/number.js~NumberType#getMin",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getMax",
    "memberof": "src/types/data/number.js~NumberType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/number.js~NumberType#getMax",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/number.js~NumberType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/number.js~NumberType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "validate",
    "memberof": "src/types/data/number.js~NumberType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/number.js~NumberType#validate",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "filter",
    "memberof": "src/types/data/number.js~NumberType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/number.js~NumberType#filter",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "filterValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "src/types/data/text.js",
    "content": "import {PhoneNumberFormat, PhoneNumberUtil} from 'google-libphonenumber';\n\nimport DataType, {validationErrors} from './';\nimport ValidationError from './validationError';\n\nconst phoneUtil = PhoneNumberUtil.getInstance();\n\nexport default class TextType extends DataType {\n  static typeName = 'text';\n\n  static regexps = {\n    email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    url: /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/,\n    ssn: /^(\\d{3}-?\\d{2}-?\\d{4}|XXX-XX-XXXX)$/,\n    zipCode: /^\\d{5}([ \\-]\\d{4})?$/,\n  };\n\n  getType() {\n    return this.options.get('textType', 'raw');\n  }\n\n  isMultiLined() {\n    return this.options.get('multi', false);\n  }\n\n  getMask() {\n    const defaultMask = this.getType() == 'ssn' ? '###-##-####' : '';\n    return this.options.get('mask', defaultMask);\n  }\n\n  hasValue(value, checkDefault) {\n    if (!super.hasValue(value, checkDefault)) {\n      return false;\n    }\n    return typeof value == 'string' && value.length > 0;\n  }\n\n  getDefaultValue() {\n    return super.getDefaultValue('');\n  }\n\n  format(value) {\n    switch (this.getType()) {\n      case 'tel':\n        return this.getDisplay(value);\n\n      default:\n        return value || '';\n    }\n  }\n\n  getDisplay(value) {\n    switch (this.getType()) {\n      case 'password':\n        return '********';\n\n      case 'tel':\n        try {\n          const telno = phoneUtil.parse(value, 'US');\n          return phoneUtil.format(telno, PhoneNumberFormat.NATIONAL);\n        } catch (e) {}\n        return value || '';\n\n      default:\n        if (this.isMultiLined()) {\n          if (value && value.includes('\\n')) {\n            return `${value.split('\\n')[0]}...`;\n          }\n        }\n        return value || '';\n    }\n  }\n\n  validate(value) {\n    return super.validate(value, () => {\n      const type = this.getType();\n      switch (type) {\n        case 'email':\n        case 'url':\n        case 'ssn':\n        case 'zipCode':\n          if (!TextType.regexps[type].test(value)) {\n            return new ValidationError(validationErrors[type], this);\n          }\n          return;\n\n        case 'tel':\n          try {\n            const telno = phoneUtil.parse(value, 'US');\n            if (!phoneUtil.isValidNumber(telno)) {\n              return new ValidationError(validationErrors.tel, this);\n            }\n          } catch (e) {\n            return new ValidationError(e.message, this);\n          }\n          return;\n\n        case 'plain':\n        case 'password':\n        default:\n          if (!this.isMultiLined() && value.includes('\\n')) {\n            return new ValidationError(validationErrors.singleline, this);\n          }\n          return;\n      }\n    });\n  }\n\n  filter(filterValue, rowValue) {\n    const filterString = `${filterValue}`.toLowerCase();\n    const rowString = `${rowValue}`.toLowerCase();\n    return rowString.indexOf(filterString) >= 0;\n  }\n}\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "variable",
    "name": "phoneUtil",
    "memberof": "src/types/data/text.js",
    "static": true,
    "longname": "src/types/data/text.js~phoneUtil",
    "access": "public",
    "export": false,
    "importPath": "formatron/src/types/data/text.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "class",
    "name": "TextType",
    "memberof": "src/types/data/text.js",
    "static": true,
    "longname": "src/types/data/text.js~TextType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/text.js",
    "importStyle": "TextType",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/types/data/.js~DataType"
    ]
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/data/text.js~TextType",
    "static": true,
    "longname": "src/types/data/text.js~TextType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "regexps",
    "memberof": "src/types/data/text.js~TextType",
    "static": true,
    "longname": "src/types/data/text.js~TextType.regexps",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "getType",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#getType",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "isMultiLined",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#isMultiLined",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "getMask",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#getMask",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "hasValue",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#hasValue",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#getDefaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "format",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#format",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "validate",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#validate",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "filter",
    "memberof": "src/types/data/text.js~TextType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/text.js~TextType#filter",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "filterValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/types/data/validationError.js",
    "content": "import ExtendableError from 'es6-error';\nimport {List} from 'immutable';\n\nexport default class ValidationError extends ExtendableError {\n  constructor(message, field, value, ref) {\n    super(message);\n    this.field = field;\n    this.value = value;\n    this.ref = ref;\n  }\n\n  addRef(ref) {\n    if (!this.ref) {\n      this.ref = List([ref]);\n    } else {\n      this.ref = this.ref.unshift(ref);\n    }\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/data/validationError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "class",
    "name": "ValidationError",
    "memberof": "src/types/data/validationError.js",
    "static": true,
    "longname": "src/types/data/validationError.js~ValidationError",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/data/validationError.js",
    "importStyle": "ValidationError",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "es6-error~ExtendableError"
    ]
  },
  {
    "__docId__": 314,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/types/data/validationError.js~ValidationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/validationError.js~ValidationError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "field",
    "memberof": "src/types/data/validationError.js~ValidationError",
    "static": false,
    "longname": "src/types/data/validationError.js~ValidationError#field",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "value",
    "memberof": "src/types/data/validationError.js~ValidationError",
    "static": false,
    "longname": "src/types/data/validationError.js~ValidationError#value",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "ref",
    "memberof": "src/types/data/validationError.js~ValidationError",
    "static": false,
    "longname": "src/types/data/validationError.js~ValidationError#ref",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "addRef",
    "memberof": "src/types/data/validationError.js~ValidationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/data/validationError.js~ValidationError#addRef",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "src/types/index.js",
    "content": "import Immutable from 'immutable';\n\nimport TypeClass from './type';\nimport {registerDataTypes, registerViewTypes} from './register';\n\n/**\n * Constant that represents data types.\n */\nexport const DATA = 'data';\n/**\n * Constant that represents view types.\n */\nexport const VIEW = 'view';\n\n/**\n * The pool of data types. When a new data type is registered, it is stored\n * here `Type.typeName -> Type`.\n */\nexport const data = {};\n/**\n * The pool of view types. When a new view type is registered, it is stored\n * here `Type.typeName -> Type`.\n */\nexport const view = {};\n\nconst types = {\n  [DATA]: data,\n  [VIEW]: view\n};\n\nregisterDataTypes(registerType.bind(null, DATA));\nregisterViewTypes(registerType.bind(null, VIEW));\n\n/**\n * Registers a custom data or view type. They must inherit from the appropriate\n * base class (see {@link DataType} and {@link ViewType}).\n *\n * @param type - One of `Types.DATA`, `Types.VIEW`\n * @param {DataType|ViewType} Type - The class to be registered\n * @throws Will throw an error if an invalid `type` is passed in.\n */\nexport function registerType(type, Type) {\n  if (!types[type]) {\n    throw new Error(`The type \"${type}\" does not exist. (while creating \"${Type.typeName}\")`);\n  }\n\n  if (!Type.typeName) {\n    throw new Error('A Type without a name cannot be registered');\n  }\n\n  // Bro, do you even type??\n  types[type][Type.typeName] = Type;\n}\n\n/**\n * Parse an Immutable Map object and return the resulting field. The Immutable\n * Map field must contain a `type` field which represents the `typeName` to\n * attempt to parse the field as.\n *\n * @param type - One of `Types.DATA`, `Types.VIEW`\n * @param {Immutable.Map} field - The field represented by an Immutable Map.\n * @throws Will throw an error if an invalid `type` or `field.get('type')` is passed in.\n */\nexport function parseField(type, field) {\n  if (!types[type]) {\n    throw new Error(`The type \"${type}\" does not exist (with field: \"${field}\")`);\n  }\n\n  if (!field) {\n    throw new Error(`Cannot parse a null field (of type: \"${type}\")`);\n  }\n\n  if (field instanceof TypeClass) {\n    return field;\n  }\n\n  if (type == VIEW && typeof field == 'string') {\n    // Allow named view type lookups.\n    return field;\n  }\n\n  field = Immutable.fromJS(field);\n\n  if (!field.get('type')) {\n    throw new Error(`Cannot parse a field with an empty type (with type and field: \"${type}\" \"${field}\")`);\n  }\n\n  if (!types[type][field.get('type')]) {\n    throw new Error(`Invalid field of type \"${field.get('type')}\" (with type and field: \"${type}\", \"${field}\")`);\n  }\n\n  return types[type][field.get('type')].parse(field, parseField.bind(null, type));\n}\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "name": "DATA",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~DATA",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/index.js",
    "importStyle": "{DATA}",
    "description": "Constant that represents data types.",
    "lineNumber": 9,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "VIEW",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~VIEW",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/index.js",
    "importStyle": "{VIEW}",
    "description": "Constant that represents view types.",
    "lineNumber": 13,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "name": "data",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~data",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/index.js",
    "importStyle": "{data}",
    "description": "The pool of data types. When a new data type is registered, it is stored\nhere `Type.typeName -> Type`.",
    "lineNumber": 19,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "variable",
    "name": "view",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~view",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/index.js",
    "importStyle": "{view}",
    "description": "The pool of view types. When a new view type is registered, it is stored\nhere `Type.typeName -> Type`.",
    "lineNumber": 24,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "name": "types",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~types",
    "access": "public",
    "export": false,
    "importPath": "formatron/src/types/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"DATA\": *, \"VIEW\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "registerType",
    "memberof": "src/types/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/index.js~registerType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/index.js",
    "importStyle": "{registerType}",
    "description": "Registers a custom data or view type. They must inherit from the appropriate\nbase class (see {@link DataType} and {@link ViewType}).",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "One of `Types.DATA`, `Types.VIEW`"
      },
      {
        "nullable": null,
        "types": [
          "DataType",
          "ViewType"
        ],
        "spread": false,
        "optional": false,
        "name": "Type",
        "description": "The class to be registered"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if an invalid `type` is passed in."
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "parseField",
    "memberof": "src/types/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/index.js~parseField",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/index.js",
    "importStyle": "{parseField}",
    "description": "Parse an Immutable Map object and return the resulting field. The Immutable\nMap field must contain a `type` field which represents the `typeName` to\nattempt to parse the field as.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "One of `Types.DATA`, `Types.VIEW`"
      },
      {
        "nullable": null,
        "types": [
          "Immutable.Map"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field represented by an Immutable Map."
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if an invalid `type` or `field.get('type')` is passed in."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/types/register.js",
    "content": "import BoolType from './data/bool';\nimport DateType from './data/date';\nimport DictType from './data/dict';\nimport EnumType from './data/enum';\nimport ListType from './data/list';\nimport MapType from './data/map';\nimport NumberDataType from './data/number';\nimport TextDataType from './data/text';\n\nimport ButtonType from './view/button';\nimport DataType from './view/data';\nimport CalendarType from './view/data/calendar';\nimport CheckboxType from './view/data/checkbox';\nimport CurrencyType from './view/data/currency';\nimport DropDownType from './view/data/dropDown';\nimport LinkType from './view/data/link';\nimport NumberType from './view/data/number';\nimport PercentType from './view/data/percent';\nimport TableType from './view/data/table';\nimport TextType from './view/data/text';\nimport GridType from './view/display/grid';\nimport HeaderType from './view/display/header';\nimport StaticType from './view/display/static';\nimport TabsType from './view/display/tabs';\nimport ValueType from './view/value';\nimport ComputedType from './view/value/computed';\nimport ConditionType from './view/value/condition';\nimport FunctionType from './view/value/function';\nimport MethodType from './view/value/method';\nimport PropertyType from './view/value/property';\nimport SwitchType from './view/value/switch';\nimport TemplateType from './view/value/template';\nimport VariableType from './view/value/variable';\n\nexport function registerDataTypes(register) {\n  register(BoolType);\n  register(DateType);\n  register(DictType);\n  register(EnumType);\n  register(ListType);\n  register(MapType);\n  register(NumberDataType);\n  register(TextDataType);\n}\n\nexport function registerViewTypes(register) {\n  register(ButtonType);\n  register(DataType);\n  register(CalendarType);\n  register(CheckboxType);\n  register(CurrencyType);\n  register(DropDownType);\n  register(LinkType);\n  register(NumberType);\n  register(PercentType);\n  register(TableType);\n  register(TextType);\n  register(GridType);\n  register(HeaderType);\n  register(StaticType);\n  register(TabsType);\n  register(ValueType);\n  register(ComputedType);\n  register(ConditionType);\n  register(FunctionType);\n  register(MethodType);\n  register(PropertyType);\n  register(SwitchType);\n  register(TemplateType);\n  register(VariableType);\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/register.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "registerDataTypes",
    "memberof": "src/types/register.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/register.js~registerDataTypes",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/register.js",
    "importStyle": "{registerDataTypes}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "register",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "registerViewTypes",
    "memberof": "src/types/register.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/register.js~registerViewTypes",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/register.js",
    "importStyle": "{registerViewTypes}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "register",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/types/type.js",
    "content": "import Immutable, {List} from 'immutable';\n\n/**\n * The base type that all view and data types inherit from. This provides basic\n * parsing functionality that can be overriden and used by the child types.\n */\nexport default class Type {\n  /** The type name. This must be overridden so that the type can be registered. */\n  static typeName = '';\n\n  /**\n   * Parses a JS or Immutable.js object into a type.\n   *\n   * @param {object|Immutable.Map} field - The field to parse.\n   * @param {function} parseField - A function to parse child types.\n   * @return {Type} The newly instantiated type.\n   */\n  static parse(field, parseField) {\n    return new this(this.parseOptions(Immutable.fromJS(field), parseField));\n  }\n\n  /**\n   * Override this function if you want the type to reference other types.\n   *\n   * @param {Immutable.Map} field - The field to parse.\n   * @param {function} parseField - A function to parse a child type.\n   * @return {Immutable.Map} The modified field object.\n   */\n  static parseOptions(field, parseField) {\n    return field;\n  }\n\n  /**\n   * @typedef {function} oneOrManyParser\n   * Takes in either a single field or a list of fields (as Immutable json) and\n   * returns either it or them parsed into types.\n   * \n   * @param {Immutable.Map|Immutable.List<Immutable.Map>} fields - The field or fields to parse.\n   * @return {Type|Immutable.List<Type>} The parsed type or types.\n   */\n\n  /**\n   * Creates a one or many parser with the passed in field parser.\n   * @param {func} parseField - The field parsing functon to use.\n   * @return {oneOrManyParser} The parser function. Can be used in `.map`, etc.\n   */\n  static parseOneOrMany(parseField) {\n    return fields => List.isList(fields) ?\n      fields.map(parseField) :\n      parseField(fields);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/type.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "Type",
    "memberof": "src/types/type.js",
    "static": true,
    "longname": "src/types/type.js~Type",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/type.js",
    "importStyle": "Type",
    "description": "The base type that all view and data types inherit from. This provides basic\nparsing functionality that can be overriden and used by the child types.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/type.js~Type",
    "static": true,
    "longname": "src/types/type.js~Type.typeName",
    "access": "public",
    "description": "The type name. This must be overridden so that the type can be registered.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "parse",
    "memberof": "src/types/type.js~Type",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/type.js~Type.parse",
    "access": "public",
    "description": "Parses a JS or Immutable.js object into a type.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "Immutable.Map"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field to parse."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "parseField",
        "description": "A function to parse child types."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": "The newly instantiated type."
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/type.js~Type",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/type.js~Type.parseOptions",
    "access": "public",
    "description": "Override this function if you want the type to reference other types.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable.Map"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field to parse."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "parseField",
        "description": "A function to parse a child type."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.Map"
      ],
      "spread": false,
      "description": "The modified field object."
    }
  },
  {
    "__docId__": 337,
    "kind": "typedef",
    "name": "oneOrManyParser",
    "memberof": "src/types/type.js~Type",
    "static": true,
    "longname": "src/types/type.js~Type.oneOrManyParser",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable.Map",
          "Immutable.List<Immutable.Map>"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "The field or fields to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Type",
        "Immutable.List<Type>"
      ],
      "spread": false,
      "description": "The parsed type or types."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "oneOrManyParser"
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "parseOneOrMany",
    "memberof": "src/types/type.js~Type",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/type.js~Type.parseOneOrMany",
    "access": "public",
    "description": "Creates a one or many parser with the passed in field parser.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "func"
        ],
        "spread": false,
        "optional": false,
        "name": "parseField",
        "description": "The field parsing functon to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "oneOrManyParser"
      ],
      "spread": false,
      "description": "The parser function. Can be used in `.map`, etc."
    }
  },
  {
    "__docId__": 339,
    "kind": "file",
    "name": "src/types/view/button.js",
    "content": "import {List} from 'immutable';\n\nimport ViewType from './';\n\n/**\n * @extends ViewType\n */\nexport default class ButtonType extends ViewType {\n  static typeName = 'button';\n\n  getArgs() {\n    return this.options.get('args') || List();\n  }\n\n  getValue(renderData) {\n    return this.getLabel(renderData);\n  }\n\n  getDisplay(renderData) {\n    return this.getValue(renderData);\n  }\n\n  getTableProps() {\n    return super.getTableProps('');\n  }\n\n  onClick(e, renderData) {\n    const args = this.getArgs().toArray();\n    renderData.options.onButtonClick(...args);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/button.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "ButtonType",
    "memberof": "src/types/view/button.js",
    "static": true,
    "longname": "src/types/view/button.js~ButtonType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/button.js",
    "importStyle": "ButtonType",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/button.js~ButtonType",
    "static": true,
    "longname": "src/types/view/button.js~ButtonType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "getArgs",
    "memberof": "src/types/view/button.js~ButtonType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/button.js~ButtonType#getArgs",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/button.js~ButtonType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/button.js~ButtonType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/button.js~ButtonType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/button.js~ButtonType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "getTableProps",
    "memberof": "src/types/view/button.js~ButtonType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/button.js~ButtonType#getTableProps",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "onClick",
    "memberof": "src/types/view/button.js~ButtonType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/button.js~ButtonType#onClick",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "file",
    "name": "src/types/view/data/calendar.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class CalendarType extends DataType {\n  static typeName = 'calendar';\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/calendar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "class",
    "name": "CalendarType",
    "memberof": "src/types/view/data/calendar.js",
    "static": true,
    "longname": "src/types/view/data/calendar.js~CalendarType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/calendar.js",
    "importStyle": "CalendarType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/calendar.js~CalendarType",
    "static": true,
    "longname": "src/types/view/data/calendar.js~CalendarType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "src/types/view/data/checkbox.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class CheckboxType extends DataType {\n  static typeName = 'checkbox';\n\n  useInputWidth() {\n    return this.options.get('useInputWidth');\n  }\n\n  getFormClasses() {\n    return {\n      'formatron-checkbox-input-width': this.useInputWidth()\n    };\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/checkbox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "class",
    "name": "CheckboxType",
    "memberof": "src/types/view/data/checkbox.js",
    "static": true,
    "longname": "src/types/view/data/checkbox.js~CheckboxType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/checkbox.js",
    "importStyle": "CheckboxType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/checkbox.js~CheckboxType",
    "static": true,
    "longname": "src/types/view/data/checkbox.js~CheckboxType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "useInputWidth",
    "memberof": "src/types/view/data/checkbox.js~CheckboxType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/checkbox.js~CheckboxType#useInputWidth",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "getFormClasses",
    "memberof": "src/types/view/data/checkbox.js~CheckboxType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/checkbox.js~CheckboxType#getFormClasses",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"formatron-checkbox-input-width\": *}"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "file",
    "name": "src/types/view/data/currency.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class CurrencyType extends DataType {\n  static typeName = 'currency';\n\n  getDisplay(renderData) {\n    const {field, value} = this.getFieldAndValue(renderData);\n    if (!Number.isFinite(value)) {\n      return '';\n    } else {\n      return value.toLocaleString({\n        currency: 'en_us',\n        currencyDisplay: 'name'\n      });\n    }\n  }\n\n  parseInput(displayValue) {\n    if (typeof displayValue != 'string' || displayValue.length == 0) {\n      return null;\n    }\n    const number = Number(displayValue.replace(/,/g, ''));\n    if (Number.isFinite(number)) {\n      return number;\n    }\n    return null;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/currency.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "CurrencyType",
    "memberof": "src/types/view/data/currency.js",
    "static": true,
    "longname": "src/types/view/data/currency.js~CurrencyType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/currency.js",
    "importStyle": "CurrencyType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/currency.js~CurrencyType",
    "static": true,
    "longname": "src/types/view/data/currency.js~CurrencyType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/data/currency.js~CurrencyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/currency.js~CurrencyType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "parseInput",
    "memberof": "src/types/view/data/currency.js~CurrencyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/currency.js~CurrencyType#parseInput",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "displayValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "src/types/view/data/dropDown.js",
    "content": "import {List} from 'immutable';\n\nimport DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class DropDownType extends DataType {\n  static typeName = 'dropDown';\n\n  constructor(options) {\n    super(options);\n    this.autoloaded = false;\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData);\n    this.autoload(renderData);\n  }\n\n  // We autoload the values for async dropdowns that use their own cache\n  // since the `react-select` component is not playing well with our\n  // caches and is firing the autoload request everytime the component\n  // is reloaded.\n  autoload(renderData) {\n    if (!this.autoloaded) {\n      const {field, value} = this.getFieldAndValue(renderData);\n      if (field && field.getValuesCache && this.isAsync(field) && renderData.options.component == 'form') {\n        field.getValues('', renderData.options)\n          .then(results => {\n            this.autoloaded = true;\n            const cache = field.getValuesCache();\n            cache[''] = results.options;\n          });\n      } else {\n        this.autoloaded = true;\n      }\n    }\n  }\n\n  /**\n   * Supports async loading of options. The `getOptions` method will then be\n   * passed a second argument of the current drop down text input. The return\n   * value is expected to be a promise.\n   * @params {DataType} dataType - The data type to provide.\n   * @return {bool} `true` if the options are loaded asynchronously.\n   */\n  isAsync(dataType) {\n    return dataType.isAsync\n      ? dataType.isAsync()\n      : false;\n  }\n\n  /**\n   * Returns if this display should allow picking multiple items or not.\n   * @param {DataType} dataType - An optional data type to provide.\n   * @return {bool} `true` if this should allow picking multiple options.\n   */\n  isMulti(dataType) {\n    if (this.options.has('multi')) {\n      return this.options.get('multi');\n    } else if (dataType && dataType.isMulti) {\n      return dataType.isMulti();\n    }\n    return false;\n  }\n\n  /**\n   * Returns a list of avaliable options in the drop down, either specified in\n   * this view type's options, or in the passed in data type.\n   * @param {RenderData} renderData - The render data to get options from.\n   * @param {string} input - If async, the input entered to return options for.\n   * @return {Immutable.List} a list of options.\n   */\n  getOptions(renderData, input) {\n    if (this.options.has('options')) {\n      return this.options.get('options', List());\n    }\n\n    const field = this.getField(renderData);\n    if (field && field.getValues) {\n      if (this.isAsync(field)) {\n        this.autoload(renderData);\n        return (this.autoloaded || input)\n          ? field.getValues(input, renderData.options)\n          : Promise.resolve(List());\n      } else {\n        return field.getValues();\n      }\n    }\n\n    return List();\n  }\n\n  getValueOption(dataType, value, renderData) {\n    if (!value) {\n      return [];\n    }\n\n    const label = dataType.getDisplay(value, renderData.options);\n    if (!label) {\n      return null;\n    }\n    return [{\n      value,\n      label,\n      title: label\n    }];\n  }\n\n  /**\n   * Allows subtypes to define filter options for faster searches. Returns\n   * undefined so that the default filter options are used.\n   * @return The filter options.\n   */\n  getFilterOptions(dataType) {\n    return dataType.getFilterOptions\n      ? dataType.getFilterOptions()\n      : undefined;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/dropDown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "class",
    "name": "DropDownType",
    "memberof": "src/types/view/data/dropDown.js",
    "static": true,
    "longname": "src/types/view/data/dropDown.js~DropDownType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/dropDown.js",
    "importStyle": "DropDownType",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "static": true,
    "longname": "src/types/view/data/dropDown.js~DropDownType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "autoloaded",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#autoloaded",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "autoload",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#autoload",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "isAsync",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#isAsync",
    "access": "public",
    "description": "Supports async loading of options. The `getOptions` method will then be\npassed a second argument of the current drop down text input. The return\nvalue is expected to be a promise.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{DataType} dataType - The data type to provide."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "`true` if the options are loaded asynchronously."
    },
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "isMulti",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#isMulti",
    "access": "public",
    "description": "Returns if this display should allow picking multiple items or not.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataType"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "An optional data type to provide."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "`true` if this should allow picking multiple options."
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#getOptions",
    "access": "public",
    "description": "Returns a list of avaliable options in the drop down, either specified in\nthis view type's options, or in the passed in data type.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The render data to get options from."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "If async, the input entered to return options for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.List"
      ],
      "spread": false,
      "description": "a list of options."
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "getValueOption",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#getValueOption",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "getFilterOptions",
    "memberof": "src/types/view/data/dropDown.js~DropDownType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/dropDown.js~DropDownType#getFilterOptions",
    "access": "public",
    "description": "Allows subtypes to define filter options for faster searches. Returns\nundefined so that the default filter options are used.",
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The filter options."
    },
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "src/types/view/data/index.js",
    "content": "import {List} from 'immutable';\n\nimport {parseRef, ImmutableRef} from '~/refs';\n\nimport ViewType from '../';\n\n/**\n * The base view type for displaying data from the model.\n * @extends ViewType\n */\nexport default class DataType extends ViewType {\n  static typeName = 'data';\n\n  /**\n   * The default ref. This references the root of a passed in value (aka, the value itself).\n   */\n  static defaultRef = new ImmutableRef('');\n\n  /**\n   * Parses the `ref` option into a {@Ref} type.\n   * @return {Immutable.Map} The parsed options.\n   */\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('defaultValue', field => field && parseField(field))\n      .update('ref', this.parseOneOrMany(parseRef));\n  }\n\n  constructor(options) {\n    super(options);\n    this.options = this.options\n      .update('ref', this.constructor.parseOneOrMany(parseRef));\n  }\n\n  initialize(renderData) {\n    const {field, value} = this.getFieldAndValue(renderData);\n    if (field && field.initialize) {\n      field.initialize(value, renderData.options);\n    }\n  }\n\n  /**\n   * Returns the reference to the underlying data. Defaults to an empty \n   * @return {Ref}\n   */\n  getRef() {\n    const refs = this.options.get('ref') || this.constructor.defaultRef;\n    if (List.isList(refs)) {\n      return refs;\n    } else {\n      return List([refs]);\n    }\n  }\n\n  /**\n   * Returns whether the underlying data type should be editable or not.\n   * Defaults to `true`.\n   * @return {bool} `true` if editable.\n   */\n  isEditable() {\n    const editable = this.options.get('editable');\n    return typeof editable == 'undefined' ?\n      true :\n      !!editable;\n  }\n\n  /**\n   * @return {string} A placeholder associated with the view.\n   */\n  getPlaceholder() {\n    return this.options.get('placeholder') || '';\n  }\n\n  /**\n   * @return {ViewType} A default value encoded as a view type.\n   */\n  getDefaultValue() {\n    return this.options.get('defaultValue');\n  }\n\n  /**\n   * @param {RenderData} renderData - The render data to get the value of.\n   * @return {object} The underlying value of the data type.\n   */\n  getValue(renderData) {\n    return this.getFieldAndValue(renderData).value;\n  }\n\n  /**\n   * @return {object} The undeflying value of the data type formatted for human consumption.\n   */\n  getDisplay(renderData) {\n    const {field, value} = this.getFieldAndValue(renderData);\n    return field\n      ? field.getDisplay(value, renderData.options)\n      : '';\n  }\n\n  /**\n   * @return {DataType} The underlying data type.\n   */\n  getField(renderData) {\n    return renderData.dataType.getField(this.getRef(), renderData.options);\n  }\n\n  /**\n   * Returns the field and value of the underlying data type.\n   * @return {object}\n   */\n  getFieldAndValue(renderData) {\n    const {dataType, dataValue} = renderData;\n    const {field, value} = dataType.getFieldAndValue(dataValue, this.getRef(), renderData.options);\n    const defaultValueType = this.getDefaultValue();\n    if (field && !field.hasValue(value) && defaultValueType) {\n      const defaultValue = defaultValueType.getValue(renderData);\n      return {\n        field,\n        value: defaultValue\n      };\n    }\n    return {field, value};\n  }\n\n  /**\n   * Filters the value by calling the underlying field's filter function. If\n   * the field is not found, call the super's filter function instead.\n   */\n  filter(filterValue, rowValue, dataType) {\n    const field = dataType.getField(this.getRef());\n    if (!field) {\n      return super.filter(filterValue, rowValue, row, dataType);\n    }\n\n    return field.filter(filterValue, rowValue);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "class",
    "name": "DataType",
    "memberof": "src/types/view/data/index.js",
    "static": true,
    "longname": "src/types/view/data/index.js~DataType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/index.js",
    "importStyle": "DataType",
    "description": "The base view type for displaying data from the model.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/index.js~DataType",
    "static": true,
    "longname": "src/types/view/data/index.js~DataType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "defaultRef",
    "memberof": "src/types/view/data/index.js~DataType",
    "static": true,
    "longname": "src/types/view/data/index.js~DataType.defaultRef",
    "access": "public",
    "description": "The default ref. This references the root of a passed in value (aka, the value itself).",
    "lineNumber": 17,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/data/index.js~DataType.parseOptions",
    "access": "public",
    "description": "Parses the `ref` option into a {@Ref} type.",
    "lineNumber": 23,
    "return": {
      "nullable": null,
      "types": [
        "Immutable.Map"
      ],
      "spread": false,
      "description": "The parsed options."
    },
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 379,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "options",
    "memberof": "src/types/view/data/index.js~DataType",
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#options",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "getRef",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#getRef",
    "access": "public",
    "description": "Returns the reference to the underlying data. Defaults to an empty ",
    "lineNumber": 46,
    "return": {
      "nullable": null,
      "types": [
        "Ref"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "isEditable",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#isEditable",
    "access": "public",
    "description": "Returns whether the underlying data type should be editable or not.\nDefaults to `true`.",
    "lineNumber": 60,
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "`true` if editable."
    },
    "params": []
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "getPlaceholder",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#getPlaceholder",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A placeholder associated with the view."
    },
    "params": []
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#getDefaultValue",
    "access": "public",
    "description": "",
    "lineNumber": 77,
    "return": {
      "nullable": null,
      "types": [
        "ViewType"
      ],
      "spread": false,
      "description": "A default value encoded as a view type."
    },
    "params": []
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#getValue",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The render data to get the value of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The underlying value of the data type."
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#getDisplay",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The undeflying value of the data type formatted for human consumption."
    },
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "getField",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#getField",
    "access": "public",
    "description": "",
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "DataType"
      ],
      "spread": false,
      "description": "The underlying data type."
    },
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "getFieldAndValue",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#getFieldAndValue",
    "access": "public",
    "description": "Returns the field and value of the underlying data type.",
    "lineNumber": 110,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "filter",
    "memberof": "src/types/view/data/index.js~DataType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/index.js~DataType#filter",
    "access": "public",
    "description": "Filters the value by calling the underlying field's filter function. If\nthe field is not found, call the super's filter function instead.",
    "lineNumber": 128,
    "params": [
      {
        "name": "filterValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "file",
    "name": "src/types/view/data/link.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class LinkType extends DataType {\n  static typeName = 'link';\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/link.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 392,
    "kind": "class",
    "name": "LinkType",
    "memberof": "src/types/view/data/link.js",
    "static": true,
    "longname": "src/types/view/data/link.js~LinkType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/link.js",
    "importStyle": "LinkType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/link.js~LinkType",
    "static": true,
    "longname": "src/types/view/data/link.js~LinkType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "file",
    "name": "src/types/view/data/number.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class NumberType extends DataType {\n  static typeName = 'number';\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/number.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 395,
    "kind": "class",
    "name": "NumberType",
    "memberof": "src/types/view/data/number.js",
    "static": true,
    "longname": "src/types/view/data/number.js~NumberType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/number.js",
    "importStyle": "NumberType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/number.js~NumberType",
    "static": true,
    "longname": "src/types/view/data/number.js~NumberType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "file",
    "name": "src/types/view/data/percent.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class PercentType extends DataType {\n  static typeName = 'percent';\n\n  getFieldAndValue(renderData) {\n    const {field, value} = super.getFieldAndValue(renderData);\n    return {\n      field,\n      value: value === null ?\n        null :\n        value * 100\n    };\n  }\n\n  getDisplay(renderData) {\n    const value = this.getValue(renderData);\n    return value === null ?\n      '' :\n      `${value}%`;\n  }\n\n  parseInput(value) {\n    return value === null ?\n      null :\n      value / 100;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/percent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 398,
    "kind": "class",
    "name": "PercentType",
    "memberof": "src/types/view/data/percent.js",
    "static": true,
    "longname": "src/types/view/data/percent.js~PercentType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/percent.js",
    "importStyle": "PercentType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/percent.js~PercentType",
    "static": true,
    "longname": "src/types/view/data/percent.js~PercentType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "getFieldAndValue",
    "memberof": "src/types/view/data/percent.js~PercentType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/percent.js~PercentType#getFieldAndValue",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"field\": *, \"value\": *}"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/data/percent.js~PercentType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/percent.js~PercentType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "parseInput",
    "memberof": "src/types/view/data/percent.js~PercentType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/percent.js~PercentType#parseInput",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "file",
    "name": "src/types/view/data/table.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class TableType extends DataType {\n  static typeName = 'table';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('columns', columns => columns && columns\n        .map(parseField)\n      );\n  }\n\n  getColumns() {\n    return this.options.get('columns');\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/table.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 404,
    "kind": "class",
    "name": "TableType",
    "memberof": "src/types/view/data/table.js",
    "static": true,
    "longname": "src/types/view/data/table.js~TableType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/table.js",
    "importStyle": "TableType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/table.js~TableType",
    "static": true,
    "longname": "src/types/view/data/table.js~TableType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/data/table.js~TableType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/data/table.js~TableType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "getColumns",
    "memberof": "src/types/view/data/table.js~TableType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/data/table.js~TableType#getColumns",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "file",
    "name": "src/types/view/data/text.js",
    "content": "import DataType from './';\n\n/**\n * @extends src/types/view/data/index.js~DataType\n */\nexport default class TextType extends DataType {\n  static typeName = 'text';\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/data/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 409,
    "kind": "class",
    "name": "TextType",
    "memberof": "src/types/view/data/text.js",
    "static": true,
    "longname": "src/types/view/data/text.js~TextType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/data/text.js",
    "importStyle": "TextType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/data/text.js~TextType",
    "static": true,
    "longname": "src/types/view/data/text.js~TextType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "file",
    "name": "src/types/view/display/grid.js",
    "content": "import {List} from 'immutable';\n\nimport {valueRenderers} from '~/renderers';\n\nimport DisplayType from './';\n\n/**\n * @extends DisplayType\n */\nexport default class GridType extends DisplayType {\n  static typeName = 'grid';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('children', children => children\n        .map(this.parseOneOrMany(parseField))\n      );\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getChildren()\n      .flatten(true)\n    );\n  }\n\n  getOrientation() {\n    return this.options.get('orientation') || 'vertical';\n  }\n\n  getChildren() {\n    return this.options.get('children');\n  }\n\n  getDisplay(renderData) {\n    // TODO: Refine the shit out of this.\n    return this.getChildren()\n      .map(viewType => List.isList(viewType) ? (\n        viewType\n          .map(viewType =>\n            valueRenderers.getDisplay(viewType, renderData)\n          )\n      ) : (\n        valueRenderers.getDisplay(viewType, renderData)\n      ))\n      .filter(value => value)\n      .join(', ');\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/display/grid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "class",
    "name": "GridType",
    "memberof": "src/types/view/display/grid.js",
    "static": true,
    "longname": "src/types/view/display/grid.js~GridType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/display/grid.js",
    "importStyle": "GridType",
    "description": "",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/display/grid.js~GridType",
    "static": true,
    "longname": "src/types/view/display/grid.js~GridType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/display/grid.js~GridType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/display/grid.js~GridType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/display/grid.js~GridType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/grid.js~GridType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "getOrientation",
    "memberof": "src/types/view/display/grid.js~GridType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/grid.js~GridType#getOrientation",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "getChildren",
    "memberof": "src/types/view/display/grid.js~GridType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/grid.js~GridType#getChildren",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/display/grid.js~GridType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/grid.js~GridType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "file",
    "name": "src/types/view/display/header.js",
    "content": "import DisplayType from './';\n\n/**\n * @extends DisplayType\n */\nexport default class HeaderType extends DisplayType {\n  static typeName = 'header';\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/display/header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 420,
    "kind": "class",
    "name": "HeaderType",
    "memberof": "src/types/view/display/header.js",
    "static": true,
    "longname": "src/types/view/display/header.js~HeaderType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/display/header.js",
    "importStyle": "HeaderType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/display/header.js~HeaderType",
    "static": true,
    "longname": "src/types/view/display/header.js~HeaderType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "file",
    "name": "src/types/view/display/index.js",
    "content": "import ViewType from '../';\n\n/**\n * @extends DisplayType\n */\nexport default class DisplayType extends ViewType {\n  static typeName = '';\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/display/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 423,
    "kind": "class",
    "name": "DisplayType",
    "memberof": "src/types/view/display/index.js",
    "static": true,
    "longname": "src/types/view/display/index.js~DisplayType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/display/index.js",
    "importStyle": "DisplayType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/display/index.js~DisplayType",
    "static": true,
    "longname": "src/types/view/display/index.js~DisplayType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "file",
    "name": "src/types/view/display/static.js",
    "content": "import DisplayType from './';\n\n/**\n * @extends DisplayType\n */\nexport default class StaticType extends DisplayType {\n  static typeName = 'static';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('display', parseField);\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getDisplay());\n  }\n\n  getDisplay() {\n    return this.options.get('display');\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/display/static.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "class",
    "name": "StaticType",
    "memberof": "src/types/view/display/static.js",
    "static": true,
    "longname": "src/types/view/display/static.js~StaticType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/display/static.js",
    "importStyle": "StaticType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/display/static.js~StaticType",
    "static": true,
    "longname": "src/types/view/display/static.js~StaticType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/display/static.js~StaticType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/display/static.js~StaticType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/display/static.js~StaticType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/static.js~StaticType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/display/static.js~StaticType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/static.js~StaticType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "file",
    "name": "src/types/view/display/tabs.js",
    "content": "import {Map} from 'immutable';\n\nimport ViewType from '../';\nimport DisplayType from './';\n\n/**\n * @extends DisplayType\n */\nexport default class TabsType extends DisplayType {\n  static typeName = 'tabs';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('tabs', tabs => tabs\n        .map(tab => tab\n          .update('label', label => Map.isMap(label) ?\n            parseField(label) :\n            label\n          )\n          .update('display', parseField)\n        )\n      );\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getTabs()\n      .map(tab => tab.get('display'))\n    );\n\n    super.initialize(renderData, this.getTabs()\n      .filter(tab => tab.get('label') instanceof ViewType)\n      .map(tab => tab.get('label'))\n    );\n  }\n\n  getTabs() {\n    return this.options.get('tabs');\n  }\n\n  getTabLabel(tab, renderData) {\n    return this.getLabel(renderData, tab.get('label'));\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/display/tabs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 432,
    "kind": "class",
    "name": "TabsType",
    "memberof": "src/types/view/display/tabs.js",
    "static": true,
    "longname": "src/types/view/display/tabs.js~TabsType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/display/tabs.js",
    "importStyle": "TabsType",
    "description": "",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/display/tabs.js~TabsType",
    "static": true,
    "longname": "src/types/view/display/tabs.js~TabsType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/display/tabs.js~TabsType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/display/tabs.js~TabsType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/display/tabs.js~TabsType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/tabs.js~TabsType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "getTabs",
    "memberof": "src/types/view/display/tabs.js~TabsType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/tabs.js~TabsType#getTabs",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "getTabLabel",
    "memberof": "src/types/view/display/tabs.js~TabsType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/display/tabs.js~TabsType#getTabLabel",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "tab",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "file",
    "name": "src/types/view/index.js",
    "content": "import Immutable, {List, Map} from 'immutable';\n\nimport {valueRenderers} from '~/renderers';\n\nimport Type from '../type';\n\nlet viewIds = 0;\n\n/**\n * The base view type. Every registered view type must eventually inherit from this.\n */\nexport default class ViewType extends Type {\n  static typeName = '';\n\n  static parseOptions(field, parseField) {\n    return field\n      .remove('type')\n      .update('label', label => Map.isMap(label) ?\n        parseField(label) :\n        label\n      );\n  }\n\n  /**\n   * Base class implementation that children can call such as:\n   *   `super.initialize(this.getChildren())`\n   * If a child does not override this, it means that this function will be\n   * called with no arguments, which is a no-op.\n   *\n   * @param {RenderData} renderData - the render data to initialize the type to.\n   * @param {ViewType|List<ViewType>} children - a single view type or a list of view types to call initialize on\n   */\n  initialize(renderData, children) {\n    if (List.isList(children)) {\n      children\n        .forEach(child => valueRenderers\n          .initialize(child, renderData)\n        );\n    } else if (children) {\n      valueRenderers.initialize(children, renderData);\n    }\n\n    const label = this.options.get('label');\n    if (label instanceof ViewType) {\n      valueRenderers.initialize(label, renderData);\n    }\n  }\n\n  /**\n   * Creates a new instance of a view type.\n   * @param {object} options - Options to apply to this instance.\n   */\n  constructor(options) {\n    super();\n    this.options = Immutable.fromJS(options || {});\n    this.uniqueId = viewIds++;\n  }\n\n  // TODO: Put default width / min width as overrideable by each sub view type.\n  // TODO: Separate form / table width options so that you can specify a single\n  // view for each.\n  getWidth() {\n    return this.options.get('width');\n  }\n\n  getMinWidth() {\n    return this.options.has('width')\n      ? this.options.get('minWidth')\n      : this.options.get('minWidth', 180);\n  }\n\n  getDefaultFlex() {\n    return this.options.has('width') ? 0 : 1;\n  }\n\n  getFlexGrow() {\n    return this.options.get('flexGrow', this.getDefaultFlex());\n  }\n\n  getFlexShrink() {\n    return this.options.get('flexShrink', this.getDefaultFlex());\n  }\n\n  /**\n   * Returns a label using 1 of 3 options. If the internal label is a basic\n   * value, return it. If it is a view type, get its associated display value.\n   * If it is a function, call the function with the render data.\n   *\n   * @param {RenderData} renderData - The data to maybe generate the label from.\n   * @param {ViewType|string} secondLabel - A second label to use in place of the built in label.\n   * @return {string} They label, if any, associated with the view.\n   */\n  getLabel(renderData, secondLabel) {\n    const label = secondLabel || this.options.get('label') || '';\n    if (label instanceof ViewType) {\n      return label.getDisplay(renderData);\n    } else if (typeof label == 'function') {\n      return label(renderData);\n    }\n    return label;\n  }\n\n  /**\n   * Returns display information for table based displays.\n   * Currently, the only display used is react-virtualized, so the options are\n   * entirely based on that library.\n   *\n   * For a view type to be used as a table column, it must have a string label.\n   * TODO: Consider allowing any labels, but pass in \"dummy\" render data that\n   * always returns empty (or default) values. In the current setup, this would\n   * work by just passing the data type and using `undefined` for the data\n   * value.\n   *\n   * If a width is supplied to the view type, the default shrink / grow factor\n   * is 0. Otherwise, the default factor is 1 and the default width is 100.\n   *\n   * @return {object}\n   */\n  getTableProps(label) {\n    label = typeof label != 'undefined' ?\n      label :\n      (this.options.get('label') || '');\n\n    if (typeof label != 'string') {\n      throw new Error(`Error ${this.constructor.name}: labels must only be plain strings when used with tables.`);\n    }\n\n    return {\n      key: label,\n      viewType: this,\n      label: label,\n      dataKey: label,\n      width: this.getWidth() || 140,\n      minWidth: this.getMinWidth(),\n      flexGrow: this.getFlexGrow(),\n      flexShrink: this.getFlexShrink(),\n      filterType: 'equals',\n      filter: this.filter.bind(this)\n    };\n  }\n\n  filter(filterValue, rowValue) {\n    return filterValue == rowValue;\n  }\n\n  asType(Type) {\n    const newType = new this.constructor(this.options);\n    newType.constructor = Type;\n    return newType;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 439,
    "kind": "variable",
    "name": "viewIds",
    "memberof": "src/types/view/index.js",
    "static": true,
    "longname": "src/types/view/index.js~viewIds",
    "access": "public",
    "export": false,
    "importPath": "formatron/src/types/view/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 440,
    "kind": "class",
    "name": "ViewType",
    "memberof": "src/types/view/index.js",
    "static": true,
    "longname": "src/types/view/index.js~ViewType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/index.js",
    "importStyle": "ViewType",
    "description": "The base view type. Every registered view type must eventually inherit from this.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/types/type.js~Type"
    ]
  },
  {
    "__docId__": 441,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/index.js~ViewType",
    "static": true,
    "longname": "src/types/view/index.js~ViewType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/index.js~ViewType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#initialize",
    "access": "public",
    "description": "Base class implementation that children can call such as:\n  `super.initialize(this.getChildren())`\nIf a child does not override this, it means that this function will be\ncalled with no arguments, which is a no-op.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "the render data to initialize the type to."
      },
      {
        "nullable": null,
        "types": [
          "ViewType",
          "List<ViewType>"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": "a single view type or a list of view types to call initialize on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#constructor",
    "access": "public",
    "description": "Creates a new instance of a view type.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to apply to this instance."
      }
    ]
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "options",
    "memberof": "src/types/view/index.js~ViewType",
    "static": false,
    "longname": "src/types/view/index.js~ViewType#options",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "uniqueId",
    "memberof": "src/types/view/index.js~ViewType",
    "static": false,
    "longname": "src/types/view/index.js~ViewType#uniqueId",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "getWidth",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#getWidth",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "getMinWidth",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#getMinWidth",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "getDefaultFlex",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#getDefaultFlex",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "getFlexGrow",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#getFlexGrow",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "getFlexShrink",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#getFlexShrink",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "getLabel",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#getLabel",
    "access": "public",
    "description": "Returns a label using 1 of 3 options. If the internal label is a basic\nvalue, return it. If it is a view type, get its associated display value.\nIf it is a function, call the function with the render data.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The data to maybe generate the label from."
      },
      {
        "nullable": null,
        "types": [
          "ViewType",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secondLabel",
        "description": "A second label to use in place of the built in label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "They label, if any, associated with the view."
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "getTableProps",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#getTableProps",
    "access": "public",
    "description": "Returns display information for table based displays.\nCurrently, the only display used is react-virtualized, so the options are\nentirely based on that library.\n\nFor a view type to be used as a table column, it must have a string label.\nTODO: Consider allowing any labels, but pass in \"dummy\" render data that\nalways returns empty (or default) values. In the current setup, this would\nwork by just passing the data type and using `undefined` for the data\nvalue.\n\nIf a width is supplied to the view type, the default shrink / grow factor\nis 0. Otherwise, the default factor is 1 and the default width is 100.",
    "lineNumber": 119,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "label",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "filter",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#filter",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "filterValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "asType",
    "memberof": "src/types/view/index.js~ViewType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/index.js~ViewType#asType",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "Type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "src/types/view/utils.js",
    "content": "export function compareAll(cmp) {\n  return args => {\n    const previousValue = args.reduce((previousValue, value) => {\n      if (typeof previousValue == 'undefined') {\n        return undefined;\n      }\n      return cmp(previousValue, value) ?\n        value : undefined;\n    });\n\n    return typeof previousValue == 'undefined' ?\n      false : true;\n  };\n}\n\nexport function textDisplay(value) {\n  return value || '';\n}\n\nexport function numericalDisplay(value) {\n  return Number.isFinite(value) ?\n    value :\n    '';\n}\n\nexport function truthyDisplay(value) {\n  return value ?\n    'Yes' :\n    'No';\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "function",
    "name": "compareAll",
    "memberof": "src/types/view/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/utils.js~compareAll",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/utils.js",
    "importStyle": "{compareAll}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "cmp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "function",
    "name": "textDisplay",
    "memberof": "src/types/view/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/utils.js~textDisplay",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/utils.js",
    "importStyle": "{textDisplay}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "function",
    "name": "numericalDisplay",
    "memberof": "src/types/view/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/utils.js~numericalDisplay",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/utils.js",
    "importStyle": "{numericalDisplay}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "function",
    "name": "truthyDisplay",
    "memberof": "src/types/view/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/utils.js~truthyDisplay",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/utils.js",
    "importStyle": "{truthyDisplay}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "file",
    "name": "src/types/view/value/computed.js",
    "content": "import {compareAll, numericalDisplay, textDisplay, truthyDisplay} from '../utils';\n\nimport {valueRenderers} from '~/renderers';\n\nimport ValueType from './';\n\n/**\n * @extends ValueType\n */\nexport default class ComputedType extends ValueType {\n  static typeName = 'computed';\n\n  static ops = {\n    '+': args => args.reduce((a, b) => a + b) || 0,\n    '-': args => args.reduce((a, b) => a - b) || 0,\n    '*': args => args.reduce((a, b) => a * b) || 0,\n    '/': args => args.reduce((a, b) => a / b) || 0,\n    '^': args => args.reduce((a, b) => Math.pow(a, b), 1),\n    '!': args => !args.get(0),\n    '>': compareAll((a, b) => a > b),\n    '<': compareAll((a, b) => a < b),\n    '>=': compareAll((a, b) => a >= b),\n    '<=': compareAll((a, b) => a <= b),\n    '=': compareAll((a, b) => a == b),\n    '!=': compareAll((a, b) => a != b),\n    'concat': args => args\n      .map((text = '') => (text !== null) ? `${text}` : '')\n      .join('')\n  };\n\n  static opDisplays = {\n    '+': numericalDisplay,\n    '-': numericalDisplay,\n    '*': numericalDisplay,\n    '/': numericalDisplay,\n    '^': numericalDisplay,\n    '!': truthyDisplay,\n    '>': truthyDisplay,\n    '<': truthyDisplay,\n    '>=': truthyDisplay,\n    '<=': truthyDisplay,\n    '=': truthyDisplay,\n    '!=': truthyDisplay,\n    'concat': textDisplay\n  };\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('args', this.parseOneOrMany(parseField));\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getArgs());\n  }\n\n  getOp() {\n    return this.options.get('op');\n  }\n\n  getArgs() {\n    return this.options.get('args');\n  }\n\n  getValue(renderData) {\n    const op = this.getOp();\n    const rawArgs = this.getArgs()\n      .map(arg => valueRenderers.parseViewType(arg, renderData));\n    const values = op == 'concat'\n      ? this.getChildDisplays(renderData, rawArgs)\n      : this.getChildValues(renderData, rawArgs);\n    const func = ComputedType.ops[op];\n    return func(values);\n  }\n\n  getDisplay(renderData) {\n    const value = this.getValue(renderData);\n    const func = ComputedType.opDisplays[this.getOp()];\n    return func(value);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/computed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 462,
    "kind": "class",
    "name": "ComputedType",
    "memberof": "src/types/view/value/computed.js",
    "static": true,
    "longname": "src/types/view/value/computed.js~ComputedType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/computed.js",
    "importStyle": "ComputedType",
    "description": "",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "static": true,
    "longname": "src/types/view/value/computed.js~ComputedType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "ops",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "static": true,
    "longname": "src/types/view/value/computed.js~ComputedType.ops",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "opDisplays",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "static": true,
    "longname": "src/types/view/value/computed.js~ComputedType.opDisplays",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/value/computed.js~ComputedType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/computed.js~ComputedType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "getOp",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/computed.js~ComputedType#getOp",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "getArgs",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/computed.js~ComputedType#getArgs",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/computed.js~ComputedType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/value/computed.js~ComputedType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/computed.js~ComputedType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "file",
    "name": "src/types/view/value/condition.js",
    "content": "import {compareAll} from '../utils';\n\nimport {valueRenderers} from '~/renderers';\n\nimport ValueType from './';\n\n/**\n * @extends ValueType\n */\nexport default class ConditionType extends ValueType {\n  static typeName = 'condition';\n\n  static ops = {\n    '=': compareAll((a, b) => a == b),\n    '!=': compareAll((a, b) => a != b),\n    '>': compareAll((a, b) => a > b),\n    '>=': compareAll((a, b) => a >= b),\n    '<': compareAll((a, b) => a < b),\n    '<=': compareAll((a, b) => a <= b),\n    '!': args => !args.get(0),\n    '&&': args => args.every(arg => !!arg),\n    '||': args => args.some(arg => !!arg),\n    'hasValue': (args, rawArgs, renderData) => {\n      const {field, value} = rawArgs.get(0).getFieldAndValue(renderData);\n      return field && field.hasValue(value);\n    }\n  };\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('args', this.parseOneOrMany(parseField))\n      .update('trueType', parseField)\n      .update('falseType', field => field && parseField(field));\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getArgs());\n    super.initialize(renderData, this.getTrueType());\n    super.initialize(renderData, this.getFalseType());\n  }\n\n  getOp() {\n    return this.options.get('op');\n  }\n\n  getArgs() {\n    return this.options.get('args');\n  }\n\n  getTrueType() {\n    return this.options.get('trueType');\n  }\n\n  getFalseType() {\n    return this.options.get('falseType');\n  }\n\n  /**\n   * Returns true or false based on the input render data.\n   * @param {RenderData} renderData - The data to test.\n   * @return {bool} `true` if the render data matches the conditions in the options.\n   */\n  test(renderData) {\n    const rawArgs = this.getArgs()\n      .map(arg => valueRenderers.parseViewType(arg, renderData));\n    const func = ConditionType.ops[this.getOp()];\n    const values = this.getChildValues(renderData, rawArgs);\n    return func(values, rawArgs, renderData);\n  }\n\n  getValue(renderData) {\n    const trueType = this.getTrueType();\n    const falseType = this.getFalseType();\n\n    return this.test(renderData)\n      ? valueRenderers.getValue(trueType, renderData)\n      : falseType && valueRenderers.getValue(falseType, renderData);\n  }\n\n  getDisplay(renderData) {\n    const trueType = this.getTrueType();\n    const falseType = this.getFalseType();\n\n    return this.test(renderData)\n      ? valueRenderers.getDisplay(trueType, renderData)\n      : falseType && valueRenderers.getDisplay(falseType, renderData);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/condition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 473,
    "kind": "class",
    "name": "ConditionType",
    "memberof": "src/types/view/value/condition.js",
    "static": true,
    "longname": "src/types/view/value/condition.js~ConditionType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/condition.js",
    "importStyle": "ConditionType",
    "description": "",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 474,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "static": true,
    "longname": "src/types/view/value/condition.js~ConditionType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "ops",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "static": true,
    "longname": "src/types/view/value/condition.js~ConditionType.ops",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/value/condition.js~ConditionType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "getOp",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#getOp",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "getArgs",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#getArgs",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "getTrueType",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#getTrueType",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "getFalseType",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#getFalseType",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "test",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#test",
    "access": "public",
    "description": "Returns true or false based on the input render data.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The data to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "`true` if the render data matches the conditions in the options."
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/value/condition.js~ConditionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/condition.js~ConditionType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "file",
    "name": "src/types/view/value/function.js",
    "content": "import {List} from 'immutable';\nimport moment from 'moment';\n\nimport {numericalDisplay, textDisplay} from '../utils';\n\nimport ValueType from './';\n\n/**\n * @extends ValueType\n */\nexport default class FunctionType extends ValueType {\n  static typeName = 'function';\n\n  static fns = {\n    ceil: value => Math.ceil(value),\n    floor: value => Math.floor(value),\n    round: value => Math.round(value),\n\n    list: (...values) => List(values)\n      .filter(value => value),\n\n    formatDate: (value, format) => moment(value * 1000)\n      .format(format),\n\n    addDate: (value, dateString) => moment(value * 1000)\n      .add(...(dateString || '').split(' '))\n      .valueOf() / 1000,\n\n    countDays: (endTimes, startTimes, addOne = true) => startTimes\n      .map((startTime, index) => {\n        const rawEndTime = endTimes.get(index);\n        const endTime = (rawEndTime === null || typeof rawEndTime == 'undefined') ?\n          (Date.now() / 1000) :\n          endTimes.get(index);\n        return endTime - startTime;\n      })\n      .map(time => time / (60 * 60 * 24))\n      .map(days => Math.floor(days + (addOne ? 1 : 0)))\n      .reduce((totalDays, days) => totalDays + days, 0)\n  };\n\n  static fnDisplays = {\n    ceil: numericalDisplay,\n    floor: numericalDisplay,\n    round: numericalDisplay,\n    formatDate: textDisplay,\n    addDate: textDisplay,\n    countDays: numericalDisplay\n  };\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('args', List(), this.parseOneOrMany(parseField));\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getArgs());\n  }\n\n  getFn() {\n    return this.options.get('fn');\n  }\n\n  getArgs() {\n    return this.options.get('args');\n  }\n\n  getValue(renderData) {\n    const values = this.getChildValues(renderData, this.getArgs());\n    const func = FunctionType.fns[this.getFn()];\n    return func(...values.toArray());\n  }\n\n  getDisplay(renderData) {\n    const value = this.getValue(renderData);\n    const func = FunctionType.fnDisplays[this.getFn()];\n    return func(value);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/function.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 486,
    "kind": "class",
    "name": "FunctionType",
    "memberof": "src/types/view/value/function.js",
    "static": true,
    "longname": "src/types/view/value/function.js~FunctionType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/function.js",
    "importStyle": "FunctionType",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "static": true,
    "longname": "src/types/view/value/function.js~FunctionType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "member",
    "name": "fns",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "static": true,
    "longname": "src/types/view/value/function.js~FunctionType.fns",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "fnDisplays",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "static": true,
    "longname": "src/types/view/value/function.js~FunctionType.fnDisplays",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/value/function.js~FunctionType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/function.js~FunctionType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "getFn",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/function.js~FunctionType#getFn",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "getArgs",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/function.js~FunctionType#getArgs",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/function.js~FunctionType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/value/function.js~FunctionType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/function.js~FunctionType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "file",
    "name": "src/types/view/value/index.js",
    "content": "import {List} from 'immutable';\n\nimport {valueRenderers} from '~/renderers';\n\nimport ViewType from '../';\n\n/**\n * @extends ViewType\n */\nexport default class ValueType extends ViewType {\n  static typeName = 'value';\n\n  /**\n   * Parses either a single or a list of children view types into their\n   * associated values.\n   * @param {RenderData} renderData - The render data to compute over.\n   * @param {ViewType|List.<ViewType>} children - The child or children to parse.\n   * @return {object} The computed data.\n   */\n  getChildValues(renderData, children) {\n    return List.isList(children) ?\n      children.map(child => valueRenderers.getValue(child, renderData)) :\n      valueRenderers.getValue(children, renderData);\n  }\n\n  getChildDisplays(renderData, children) {\n    return List.isList(children) ?\n      children.map(child => valueRenderers.getDisplay(child, renderData)) :\n      valueRenderers.getDisplay(children, renderData)\n  }\n\n  /**\n   * Returns the raw underlying value of this view type.\n   * @param {RenderData} renderData - The data to compute on.\n   * @return {object} The computed value.\n   */\n  getValue(renderData) {\n    return this.options.get('value', null);\n  }\n\n  /**\n   * Returns the underlying value of this view type in a human consumable form.\n   * @param {RenderData} renderData - The data to compute on.\n   * @return {object} The computed value.\n   */\n  getDisplay(renderData) {\n    return this.getValue(renderData);\n  }\n\n  filter(filterValue, rowValue) {\n    const filterString = `${filterValue}`.toLowerCase();\n    const rowString = `${rowValue}`.toLowerCase();\n    return rowString.indexOf(filterString) >= 0;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 497,
    "kind": "class",
    "name": "ValueType",
    "memberof": "src/types/view/value/index.js",
    "static": true,
    "longname": "src/types/view/value/index.js~ValueType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/index.js",
    "importStyle": "ValueType",
    "description": "",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 498,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/index.js~ValueType",
    "static": true,
    "longname": "src/types/view/value/index.js~ValueType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "getChildValues",
    "memberof": "src/types/view/value/index.js~ValueType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/index.js~ValueType#getChildValues",
    "access": "public",
    "description": "Parses either a single or a list of children view types into their\nassociated values.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The render data to compute over."
      },
      {
        "nullable": null,
        "types": [
          "ViewType",
          "List.<ViewType>"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": "The child or children to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The computed data."
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "getChildDisplays",
    "memberof": "src/types/view/value/index.js~ValueType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/index.js~ValueType#getChildDisplays",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      },
      {
        "name": "children",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/index.js~ValueType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/index.js~ValueType#getValue",
    "access": "public",
    "description": "Returns the raw underlying value of this view type.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The data to compute on."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The computed value."
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/value/index.js~ValueType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/index.js~ValueType#getDisplay",
    "access": "public",
    "description": "Returns the underlying value of this view type in a human consumable form.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The data to compute on."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The computed value."
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "filter",
    "memberof": "src/types/view/value/index.js~ValueType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/index.js~ValueType#filter",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "filterValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "file",
    "name": "src/types/view/value/method.js",
    "content": "import {List} from 'immutable';\n\nimport {valueRenderers} from '~/renderers';\n\nimport ValueType from './';\n\n/**\n * @extends ValueType\n */\nexport default class MethodType extends ValueType {\n  static typeName = 'method';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('obj', parseField)\n      .update('args', List(), this.parseOneOrMany(parseField));\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getArgs());\n    super.initialize(renderData, this.getObj());\n  }\n\n  getObj() {\n    return this.options.get('obj');\n  }\n\n  getMethod() {\n    return this.options.get('method');\n  }\n\n  getArgs() {\n    return this.options.get('args');\n  }\n\n  getValue(renderData) {\n    const obj = valueRenderers.getValue(this.getObj(), renderData);\n    if (!obj) {\n      return null;\n    }\n\n    const values = this.getChildValues(renderData, this.getArgs());\n    return obj[this.getMethod()](...values.toArray());\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/method.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 505,
    "kind": "class",
    "name": "MethodType",
    "memberof": "src/types/view/value/method.js",
    "static": true,
    "longname": "src/types/view/value/method.js~MethodType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/method.js",
    "importStyle": "MethodType",
    "description": "",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/method.js~MethodType",
    "static": true,
    "longname": "src/types/view/value/method.js~MethodType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/value/method.js~MethodType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/value/method.js~MethodType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/value/method.js~MethodType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/method.js~MethodType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "getObj",
    "memberof": "src/types/view/value/method.js~MethodType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/method.js~MethodType#getObj",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "getMethod",
    "memberof": "src/types/view/value/method.js~MethodType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/method.js~MethodType#getMethod",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "getArgs",
    "memberof": "src/types/view/value/method.js~MethodType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/method.js~MethodType#getArgs",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/method.js~MethodType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/method.js~MethodType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "file",
    "name": "src/types/view/value/property.js",
    "content": "import {valueRenderers} from '~/renderers';\n\nimport ValueType from './';\n\n/**\n * @extends ValueType\n */\nexport default class PropertyType extends ValueType {\n  static typeName = 'property';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('obj', parseField);\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getObj());\n  }\n\n  getObj() {\n    return this.options.get('obj');\n  }\n\n  getProperty() {\n    return this.options.get('property');\n  }\n\n  getValue(renderData) {\n    const obj = valueRenderers.getValue(this.getObj(), renderData);\n    return obj ?\n      obj[this.getProperty()] :\n      null;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/property.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 514,
    "kind": "class",
    "name": "PropertyType",
    "memberof": "src/types/view/value/property.js",
    "static": true,
    "longname": "src/types/view/value/property.js~PropertyType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/property.js",
    "importStyle": "PropertyType",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 515,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/property.js~PropertyType",
    "static": true,
    "longname": "src/types/view/value/property.js~PropertyType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/value/property.js~PropertyType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/value/property.js~PropertyType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/value/property.js~PropertyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/property.js~PropertyType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "getObj",
    "memberof": "src/types/view/value/property.js~PropertyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/property.js~PropertyType#getObj",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "getProperty",
    "memberof": "src/types/view/value/property.js~PropertyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/property.js~PropertyType#getProperty",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/property.js~PropertyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/property.js~PropertyType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "file",
    "name": "src/types/view/value/switch.js",
    "content": "import {valueRenderers} from '~/renderers';\n\nimport ValueType from './';\n\n/**\n * @extends ValueType\n */\nexport default class SwitchType extends ValueType {\n  static typeName = 'switch';\n\n  static parseOptions(field, parseField) {\n    return super.parseOptions(field, parseField)\n      .update('switch', parseField)\n      .update('cases', cases => cases\n        .map(caseField => caseField\n          .update('case', parseField)\n          .update('display', parseField)\n        )\n      )\n      .update('defaultDisplay', field => field && parseField(field));\n  }\n\n  initialize(renderData) {\n    super.initialize(renderData, this.getSwitch());\n    super.initialize(renderData, this.getCases()\n      .map(caseField => caseField.get('case'))\n    );\n\n    // Allow some case displays to fail since they may not be intended for the\n    // current value. However, since not all data may have been loaded yet, due\n    // to this terrible initialize scheme, we cannot tell which case displays\n    // to load, so we have to try to load them all.\n    this.getCases()\n      .map(caseField => caseField.get('display'))\n      .forEach(display => {\n        try {\n          valueRenderers.initialize(display, renderData);\n        } catch (e) {}\n      });\n\n    super.initialize(renderData, this.getDefaultDisplay());\n  }\n\n  getSwitch() {\n    return this.options.get('switch');\n  }\n\n  getCases() {\n    return this.options.get('cases');\n  }\n\n  getDefaultDisplay() {\n    const defaultDisplay = this.options.get('defaultDisplay');\n    return defaultDisplay || null;\n  }\n\n  /**\n   * Returns the appropriate switch case based on the input render data.\n   * @param {RenderData} renderData - The data to switch over.\n   * @return {ViewType} The resulting view type from the switch statement.\n   */\n  switch(renderData) {\n    const switchValue = valueRenderers.getValue(this.getSwitch(), renderData);\n    const caseField = this.getCases()\n      .find(caseField =>\n        valueRenderers.getValue(caseField.get('case'), renderData) == switchValue\n      );\n\n    if (caseField) {\n      return caseField.get('display');\n    }\n\n    return this.getDefaultDisplay();\n  }\n\n  getValue(renderData) {\n    const display = this.switch(renderData);\n    return display ?\n      valueRenderers.getValue(display, renderData) :\n      null;\n  }\n\n  getDisplay(renderData) {\n    const display = this.switch(renderData);\n    return display ?\n      valueRenderers.getDisplay(display, renderData) :\n      null;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/switch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 522,
    "kind": "class",
    "name": "SwitchType",
    "memberof": "src/types/view/value/switch.js",
    "static": true,
    "longname": "src/types/view/value/switch.js~SwitchType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/switch.js",
    "importStyle": "SwitchType",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 523,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "static": true,
    "longname": "src/types/view/value/switch.js~SwitchType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "parseOptions",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/view/value/switch.js~SwitchType.parseOptions",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "initialize",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/switch.js~SwitchType#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "getSwitch",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/switch.js~SwitchType#getSwitch",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "getCases",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/switch.js~SwitchType#getCases",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "getDefaultDisplay",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/switch.js~SwitchType#getDefaultDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "switch",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/switch.js~SwitchType#switch",
    "access": "public",
    "description": "Returns the appropriate switch case based on the input render data.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderData"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "The data to switch over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ViewType"
      ],
      "spread": false,
      "description": "The resulting view type from the switch statement."
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/switch.js~SwitchType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/value/switch.js~SwitchType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/switch.js~SwitchType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "file",
    "name": "src/types/view/value/template.js",
    "content": "import parseTemplate from '~/template';\n\nimport ValueType from './';\n\n/**\n * @extends ValueType\n * @deprecated\n */\nexport default class TemplateType extends ValueType {\n  static typeName = 'template';\n\n  getTemplate() {\n    return this.options.get('template');\n  }\n\n  getValue(renderData) {\n    return parseTemplate(this.getTemplate(), renderData);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/template.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 533,
    "kind": "class",
    "name": "TemplateType",
    "memberof": "src/types/view/value/template.js",
    "static": true,
    "longname": "src/types/view/value/template.js~TemplateType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/template.js",
    "importStyle": "TemplateType",
    "description": "",
    "lineNumber": 9,
    "deprecated": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/template.js~TemplateType",
    "static": true,
    "longname": "src/types/view/value/template.js~TemplateType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "getTemplate",
    "memberof": "src/types/view/value/template.js~TemplateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/template.js~TemplateType#getTemplate",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/template.js~TemplateType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/template.js~TemplateType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "file",
    "name": "src/types/view/value/variable.js",
    "content": "import ValueType from './';\n\n/**\n * @extends ValueType\n */\nexport default class VariableType extends ValueType {\n  static typeName = 'variable';\n\n  static variables = {\n    now: () => Date.now() / 1000\n  };\n\n  static variableDisplays = {\n    now: value => (new Date(value)).toLocaleString()\n  };\n\n  getVariable() {\n    return this.options.get('name');\n  }\n\n  getValue(renderData) {\n    const func = VariableType.variables[this.getVariable()];\n    return func();\n  }\n\n  getDisplay(renderData) {\n    const value = this.getValue(renderData);\n    const func = VariableType.variableDisplays[this.getVariable()];\n    return func(value);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/russell/code/formatron/src/types/view/value/variable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 538,
    "kind": "class",
    "name": "VariableType",
    "memberof": "src/types/view/value/variable.js",
    "static": true,
    "longname": "src/types/view/value/variable.js~VariableType",
    "access": "public",
    "export": true,
    "importPath": "formatron/src/types/view/value/variable.js",
    "importStyle": "VariableType",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 539,
    "kind": "member",
    "name": "typeName",
    "memberof": "src/types/view/value/variable.js~VariableType",
    "static": true,
    "longname": "src/types/view/value/variable.js~VariableType.typeName",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "member",
    "name": "variables",
    "memberof": "src/types/view/value/variable.js~VariableType",
    "static": true,
    "longname": "src/types/view/value/variable.js~VariableType.variables",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "variableDisplays",
    "memberof": "src/types/view/value/variable.js~VariableType",
    "static": true,
    "longname": "src/types/view/value/variable.js~VariableType.variableDisplays",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "getVariable",
    "memberof": "src/types/view/value/variable.js~VariableType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/variable.js~VariableType#getVariable",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/types/view/value/variable.js~VariableType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/variable.js~VariableType#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "getDisplay",
    "memberof": "src/types/view/value/variable.js~VariableType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/types/view/value/variable.js~VariableType#getDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "renderData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# formatron\nA library that generates and validates HTML forms given a JSON schema.\n\n## Install\n`npm install --save formatron`\n\n## Run Demo\n\n```\n$ npm install\n$ npm start\n```\n\nThen navigate to http://localhost:8080/ in your browser and you should be able\nto see formatron in action.\n\n## Documentation\n\nFor a current API reference, see: https://formatron.github.io\n\nThis library is about to undergo a refactoring which will then push its version\nto 1.0.0. This documentation will provide a description of how the library is\ncurrently setup, and what the current plans are for post refactoring.\n\nThere are currently five main sections:\n\n* Type System\n* Data Types\n* View Types\n* Renderers\n* React Implementation\n\n### Type System\n`./src/types/index.js`\n`./src/types/type.js`\n\nThe type system is how formatron registers data types and view types so that it\ncan parse JSON into the appropriate type.\n\nThe type system maintains a registry of types for data, and one for views. It\nalso contains a function to register a new type, as well as one to parse JSON.\n\n```\nimport * as Types from 'formatron/lib/types';\nimport Type from 'formatron/lib/types/type';\nimport DataType from 'formatron/lib/types/data';\nimport ViewType from 'formatron/lib/types/view';\n\n// Types.DATA and Types.VIEW let formatron know what registry you want to work\n// with.\n\nclass NewDataType extends DataType {\n  // This type name is the name used when registering or accessing the type.\n  // Make sure to pick something unique!!\n  static typeName = 'newDataType';\n}\n\nclass NewViewType extends ViewType {\n  static typeName = 'newViewType';\n}\n\nTypes.registerType(Types.DATA, NewDataType);\nTypes.registerType(Types.VIEW, NewViewType);\n\n// After registering, you can succesfully parse them.\n\nTypes.parseField(Types.DATA, {\n  type: 'newDataType',\n  name: 'fieldname',\n  options: { ... }\n});\n\nTypes.parseField(Types.VIEW, {\n  type: 'newViewType',\n  ...otherOptions\n});\n\n// and access them in the code.\nnew Types.data.newDataType('fieldName', { ... });\nnew Types.view.newViewType({ ... });\n\n```\n\n### Data Types\nData types represent the structure of the data object. They understand how to:\n\n* validate\n* parse\n* format\n* default value\n* initialize\n\nHowever, a data type only contains the algorithms to perform the above; they do\nnot store the data themselves.\n\nSee `./src/types/data` for a full list of data types.\nSee `./src/types/data/index.js` for the base data type and the base container\ndata type (currently using Immutable.js)\n\n```\nconst modelType = new Types.data.map('model', {\n  defaultValue: {},\n  data: [\n    new Types.data.number('id', {\n      required: true,\n      numberType: 'integer',\n      defaultValue: 0\n    }),\n    new Types.data.text('name', {\n      defaultValue: ''\n    })\n  ]\n});\n\nmodelType.getDefaultValue() == {\n  id: 0,\n  name: ''\n};\n\nmodelType.getDisplay({id: 2, name: 'foo'}) == 'id: 2, name: foo';\n\nmodelType.validate({name: 'foo'}) == Error('Missing \"id\"');\n```\n\n#### Post Refactor\nThe `initialize()` function of the data type is called when a form is loaded so\nthat any external resources can be loaded (eg, foreign keys). However, this has\nbeen determined to be outside the scope of the data type and will be refactored\nto a new location in the near future.\n\n### View Types\nView types display data to the user, and define interactions to update the data.\nEg, a form, a table (that can toggle between editable or not).\n\nThe base view type (`./src/types/view/index.js`) simply defines a label and\nproperties for sizing either a form field or a table column.\n\nThe actual implementations for view types derive from one of the following:\n\n* Data component views\n** `./src/types/view/data/...`\n** Eg, drop down, checkbox, text input\n** Each data component uses the `ref` option to reference a data type\n* Display views\n** `./src/types/view/display/...`\n** Eg, grid, tabs, condition\n** Each display contains child views that it displays on the form\n* Value views\n** `./src/types/view/value/...`\n** Eg, constant, computation\n** Each value view displays a static value of some kind\n** Some value views take children views as options which it uses to compute the static value\n* Other views\n** Various files\n** Eg, button view, table of related models\n** Displays some more complex view, or a view that does not fit into the above categories\n\n```\nconst createFormView = new Types.view.grid({\n  label: 'Create new model',\n  children: [\n    new Types.view.number({\n      label: 'ID',\n      ref: 'id'\n    }),\n    new Types.view.text({\n      label: 'Name',\n      ref: 'name'\n    })\n  ]\n});\n\n// Passing gridView into a Form component would display two fields, \"ID\" and\n// \"Name\" to the user to edit.\n```\n\nAny formatron argument that takes a view type can also take a string. This will\ncause formatron to lookup the view type in the supplied view types map. See the\nRenderers section below for more details.\n\n#### Post Refactor\nView types will be modified to simply handle the display of data and handle\nuser inputs related to updating the data. Other functionality currently handled\nby view types will be refactored to a new home.\n\nThe view types constructor signature may also change\n\n### Renderers\nRenderers are an interface that takes in a data type, data value, view type and\noptions, and returns a rendered value. The two types of rendered values that\nformatron supports out of the box are React components and JavaScript\nvariables.\n\nSee `./src/renderers/renderer.js` for the renderer interface.\nSee `./src/renderers/renderData.js` for the render data structure.\n\nThe built in renderers also allow view type lookups by string, via a\n`viewTypes` map in the render data options.\n\n```\nimport {valueRenderers} from 'formatron/lib/renderers';\nimport reactRenderers from 'formatron/lib/react/renderers';\n\nconst views = Immutable.Map({\n  annotatedName: new Types.view.computed({\n    label: 'Annotated Name',\n    op: 'concat',\n    args: [\n      new Types.view.value({value: 'Annotation: '}),\n      new Types.view.data({ref: 'name'})\n    ]\n  }),\n\n  createForm: createFormView // from above\n});\n\nconst renderData = new RenderData(\n  modelType, // from above\n  {id: 2, name: 'foo'},\n  {viewTypes: views}\n);\n\n// Lookup the view type\nvalueRenderers.getValue('annotatedName', renderData) ==\n  'Annotation: foo';\n\n// Supply a custom view type\nconst lengthView = new Types.view.property({\n  obj: 'annotatedName',\n  property: 'length'\n});\nvalueRenderers.getDisplay(lengthView, renderData) == 15;\n\n// Returns a react component that represents the create form view.\nreactRenderers.renderFormField('createForm', renderData);\n```\n\nThe list of render data options required for react forms is:\n\n* getError(ref) : error message\n* isDisabled(ref) : bool\n* onChange(ref, value, viewLabel) : undefined\n** viewLabel is used to display validation errors to the user\n* onBlur(ref) : undefined\n* onButtonClick(...args) : undefined\n** The args are passed through as is to the form's `onButtonClick` prop\n* submit() : undefined\n** Submits the form\n\n#### Post refactor\nThis may be removed entirely with renderering left up to the specific\nimplementation.\n\n### React Implementation\nImplements the components for forms, tables, and renderers.\n\nThe two main uses are:\n\n#### Form\n`./src/react/components/form.jsx`\n\nBasic prop types are:\n\n* dataType\n* model\n* viewType\n* viewTypes\n\nSee the bottom of the source file for a complete list.\n\n```\n<Form\n  dataType={modelsType}\n  model={{\n    id: 2,\n    name: 'foo'\n  }}\n  viewType='createForm'\n  viewTypes={views}\n/>\n```\n\n#### Table\n`./src/react/components/table/...`\n\nA basic table with multiple, optional, extensions is provided:\n\nBasic prop types are:\n\n* dataType\n* models\n* columns - list of view types\n* viewTypes\n\nSee the relevant source file for a complete list.\n\n```\n<Table\n  dataType={modelsType}\n  models={[{\n    id: 2,\n    name: 'foo'\n  }, {\n    id: 3,\n    name: 'bar'\n  }]}\n  columns={[\n    new Types.view.number({\n      label: 'ID',\n      ref: 'id'\n    }),\n    new Types.view.text({\n      label: 'Name',\n      ref: 'name'\n    }),\n    'annotatedName'\n  ]},\n  viewTypes={views}\n/>\n```\n\n#### Post refactor\nAll of the form handling logic is embeded in the React components. These will\nbe refactored out so that they can be reused by multiple components /\nrenderers.\n\n### Data Sources (Post refactor)\nData sources is a new concept for the refactor that is currently implemented\nas a mishmash between the data types, view types and renderers.\n\nThe goal is for view types to describe how to interact with the data, data\nsources to describe where that data comes from, and data types to make sure\nthat the data is valid.\n\nEg, a data source for:\n* fetch the ID of the data model\n* fetch the computed annotated name value\n* fetch the document related via a foreign key\n\nThe data sources would be responsible for:\n* knowing where the data is stored and how to retreive it\n* knowing how to update the data when the form is changed\n* knowing if the data is currently valid or invalid\n* performing any required computations\n\n",
    "longname": "/home/russell/code/formatron/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"formatron\",\n  \"version\": \"0.0.65\",\n  \"description\": \"A library that generates forms based on JSON schema.\",\n  \"main\": \"./lib\",\n  \"scripts\": {\n    \"doc\": \"esdoc\",\n    \"test\": \"karma start\",\n    \"test:watch\": \"karma start --no-single-run --auto-watch\",\n    \"start\": \"webpack-dev-server --env.dev --hot --inline --content-base example/ --port 8080\",\n    \"start:lib:js\": \"babel --watch src --out-dir lib\",\n    \"build\": \"npm run build:lib && npm run build:dist\",\n    \"build:lib\": \"npm run build:lib:js && npm run build:lib:css && npm run build:lib:assets\",\n    \"build:lib:js\": \"babel src --out-dir lib\",\n    \"build:lib:css\": \"node-sass --load-path=./node_modules --output lib src\",\n    \"build:lib:assets\": \"cp src/theme/*.png lib/theme/\",\n    \"build:dist\": \"webpack --env.prod\",\n    \"clean\": \"rm -r lib/* dist/*\",\n    \"preversion\": \"echo 'tests go here'\",\n    \"version\": \"npm run clean && npm run build && npm run doc\",\n    \"postversion\": \"git push && git push --tags\",\n    \"format\": \"prettier --trailing-comma es5 --no-bracket-spacing --single-quote true --write\"\n  },\n  \"author\": \"Andrew Russell\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"classnames\": \"^2.2.5\",\n    \"debounce\": \"^1.0.2\",\n    \"es6-error\": \"^4.0.2\",\n    \"font-awesome\": \"^4.7.0\",\n    \"font-awesome-webpack-2\": \"^1.0.0\",\n    \"google-libphonenumber\": \"^1.0.27\",\n    \"immutable\": \"^4.0.0-rc.2\",\n    \"less\": \"^2.7.2\",\n    \"moment\": \"^2.0.0\",\n    \"react\": \"^15.0.0\",\n    \"react-currency-input\": \"^1.0.4\",\n    \"react-debounce-input\": \"^2.4.2\",\n    \"react-dropzone\": \"^3.9.2\",\n    \"react-immutable-proptypes\": \"^2.1.0\",\n    \"react-maskedinput\": \"^3.2.4\",\n    \"react-portal\": \"^3.0.0\",\n    \"react-rte\": \"^0.11.0\",\n    \"react-select\": \"^1.0.0-rc.3\",\n    \"react-tabs\": \"^0.7.0\",\n    \"react-tether\": \"^0.5.6\",\n    \"react-virtualized\": \"^9.0.0\",\n    \"react-virtualized-select\": \"^3.1.0\",\n    \"yet-another-datetime-picker\": \"^1.0.4\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^7.1.1\",\n    \"babel-core\": \"^6.18.0\",\n    \"babel-generator\": \"^6.11.0\",\n    \"babel-loader\": \"^6.2.7\",\n    \"babel-plugin-import-rename\": \"^1.0.1\",\n    \"babel-plugin-react-require\": \"^3.0.0\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"babel-polyfill\": \"^6.16.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-stage-2\": \"^6.5.0\",\n    \"babel-root-import\": \"^4.1.8\",\n    \"chai\": \"^4.0.2\",\n    \"chai-enzyme\": \"^0.8.0\",\n    \"css-loader\": \"^0.27.3\",\n    \"enzyme\": \"^2.9.1\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"file-loader\": \"^0.10.1\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"karma\": \"^1.7.0\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-chrome-launcher\": \"^2.2.0\",\n    \"karma-ie-launcher\": \"^1.0.0\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-sinon\": \"^1.0.5\",\n    \"karma-webpack\": \"^2.0.3\",\n    \"mocha\": \"^3.4.2\",\n    \"node-sass\": \"^4.1.1\",\n    \"postcss\": \"^6.0.1\",\n    \"postcss-loader\": \"^2.0.5\",\n    \"prettier\": \"^1.5.3\",\n    \"react-dom\": \"^15.3.2\",\n    \"react-hot-loader\": \"^1.3.1\",\n    \"react-test-renderer\": \"^15.6.1\",\n    \"sass-loader\": \"^6.0.3\",\n    \"sinon\": \"^2.3.6\",\n    \"style-loader\": \"^0.15.0\",\n    \"url-loader\": \"^0.5.8\",\n    \"webpack\": \"^2.2.1\",\n    \"webpack-dev-server\": \"^2.4.2\"\n  }\n}\n",
    "longname": "/home/russell/code/formatron/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]